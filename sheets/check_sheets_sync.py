#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ Google Sheets.
–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –∏ –≤—ã—è–≤–ª—è–µ—Ç —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è.
"""

import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from db.database import async_session
from db.models import User, Payment, Server
from sqlalchemy import select
from sheets.sheets_service import (
    sheet_users, sheet_payments, sheet_servers,
    client, spreadsheets_id
)


class SyncChecker:
    def __init__(self):
        self.issues = []

    def add_issue(self, issue):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –≤ —Å–ø–∏—Å–æ–∫"""
        self.issues.append(issue)
        print(f"‚ö†Ô∏è  {issue}")

    async def check_users_sync(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("\nüë• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        async with async_session() as session:
            result = await session.execute(select(User).order_by(User.id))
            db_users = result.scalars().all()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Sheets
        try:
            sheets_records = sheet_users.get_all_records()
        except Exception as e:
            self.add_issue(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets Users: {e}")
            return
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        db_count = len(db_users)
        sheets_count = len(sheets_records)
        
        print(f"   üìä –ë–î: {db_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print(f"   üìä Sheets: {sheets_count} –∑–∞–ø–∏—Å–µ–π")
        
        if db_count != sheets_count:
            self.add_issue(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –ë–î={db_count}, Sheets={sheets_count}")
        else:
            print("   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if sheets_records:
            expected_headers = ['id', 'telegram_id', 'username', 'balance', 'created_at',
                              'subscription_start', 'subscription_end', 'is_active', 
                              'vpn_link', 'server_id', 'trial_used']
            actual_headers = list(sheets_records[0].keys())
            
            if actual_headers != expected_headers:
                self.add_issue(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ Users –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_headers}, –ø–æ–ª—É—á–µ–Ω–æ: {actual_headers}")
            else:
                print("   ‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        if db_users and sheets_records and len(db_users) == len(sheets_records):
            for i in [0, len(db_users)//2, -1]:  # –ø–µ—Ä–≤–∞—è, —Å—Ä–µ–¥–Ω—è—è, –ø–æ—Å–ª–µ–¥–Ω—è—è
                if i < len(db_users):
                    db_user = db_users[i]
                    sheets_user = sheets_records[i]
                    
                    if str(db_user.id) != str(sheets_user['id']):
                        self.add_issue(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –≤ –ø–æ–∑–∏—Ü–∏–∏ {i}: –ë–î={db_user.id}, Sheets={sheets_user['id']}")

    async def check_payments_sync(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–ª–∞—Ç–µ–∂–µ–π"""
        print("\nüí≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        async with async_session() as session:
            result = await session.execute(select(Payment).order_by(Payment.id))
            db_payments = result.scalars().all()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Sheets
        try:
            sheets_records = sheet_payments.get_all_records()
        except Exception as e:
            self.add_issue(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets Payments: {e}")
            return
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        db_count = len(db_payments)
        sheets_count = len(sheets_records)
        
        print(f"   üìä –ë–î: {db_count} –ø–ª–∞—Ç–µ–∂–µ–π")
        print(f"   üìä Sheets: {sheets_count} –∑–∞–ø–∏—Å–µ–π")
        
        if db_count != sheets_count:
            self.add_issue(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –ë–î={db_count}, Sheets={sheets_count}")
        else:
            print("   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if sheets_records:
            expected_headers = ['id', 'user_id', 'amount', 'payment_id', 'status',
                              'created_at', 'completed_at', 'nickname', 'message', 'pay_system']
            actual_headers = list(sheets_records[0].keys())
            
            if actual_headers != expected_headers:
                self.add_issue(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ Payments –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_headers}, –ø–æ–ª—É—á–µ–Ω–æ: {actual_headers}")
            else:
                print("   ‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")

    async def check_servers_sync(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        print("\nüñ•Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        async with async_session() as session:
            result = await session.execute(select(Server).order_by(Server.id))
            db_servers = result.scalars().all()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Sheets
        try:
            sheets_records = sheet_servers.get_all_records()
        except Exception as e:
            self.add_issue(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets Servers: {e}")
            return
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        db_count = len(db_servers)
        sheets_count = len(sheets_records)
        
        print(f"   üìä –ë–î: {db_count} —Å–µ—Ä–≤–µ—Ä–æ–≤")
        print(f"   üìä Sheets: {sheets_count} –∑–∞–ø–∏—Å–µ–π")
        
        if db_count != sheets_count:
            self.add_issue(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –ë–î={db_count}, Sheets={sheets_count}")
        else:
            print("   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if sheets_records:
            expected_headers = ['id', 'name', 'url', 'is_active', 'is_default',
                              'created_at', 'description']
            actual_headers = list(sheets_records[0].keys())
            
            if actual_headers != expected_headers:
                self.add_issue(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ Servers –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_headers}, –ø–æ–ª—É—á–µ–Ω–æ: {actual_headers}")
            else:
                print("   ‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")

    async def check_database_integrity(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î"""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        async with async_session() as session:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏
            result = await session.execute(
                select(User).where(
                    User.server_id.isnot(None)
                ).outerjoin(Server, User.server_id == Server.id).where(Server.id.is_(None))
            )
            orphan_users = result.scalars().all()
            
            if orphan_users:
                self.add_issue(f"–ù–∞–π–¥–µ–Ω–æ {len(orphan_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ server_id")
                for user in orphan_users[:5]:  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) -> server_id: {user.server_id}")
            else:
                print("   ‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ server_id")
            
            # –ü–ª–∞—Ç–µ–∂–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            result = await session.execute(
                select(Payment).outerjoin(User, Payment.user_id == User.id).where(User.id.is_(None))
            )
            orphan_payments = result.scalars().all()
            
            if orphan_payments:
                self.add_issue(f"–ù–∞–π–¥–µ–Ω–æ {len(orphan_payments)} –ø–ª–∞—Ç–µ–∂–µ–π —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ user_id")
            else:
                print("   ‚úÖ –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ user_id")

    async def full_check(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        print("üîç –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
        print(f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
        
        try:
            await self.check_database_integrity()
            await self.check_users_sync()
            await self.check_payments_sync()
            await self.check_servers_sync()
            
            print(f"\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:")
            if not self.issues:
                print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
            else:
                print(f"‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(self.issues)}")
                print("\nüìù –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º:")
                for i, issue in enumerate(self.issues, 1):
                    print(f"   {i}. {issue}")
                print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")
            
            print(f"\nüïê –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
            import traceback
            traceback.print_exc()
            raise


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò GOOGLE SHEETS")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Google Sheets
    try:
        print("üîó –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets...")
        spreadsheet = client.open_by_key(spreadsheets_id)
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {spreadsheet.title}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    checker = SyncChecker()
    await checker.full_check()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    return 0 if not checker.issues else 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code) 