#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets.
–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏—Ö –∑–∞–Ω–æ–≤–æ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π.
"""

import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from db.database import async_session
from db.models import User, Payment, Server
from sqlalchemy import select
from sheets.sheets_service import (
    sheet_users, sheet_payments, sheet_servers,
    client, spreadsheets_id
)


class SheetsSync:
    def __init__(self):
        self.headers_users = [
            'id', 'telegram_id', 'username', 'balance', 'created_at',
            'subscription_start', 'subscription_end', 'is_active', 
            'vpn_link', 'server_id', 'trial_used'
        ]
        
        self.headers_payments = [
            'id', 'user_id', 'amount', 'payment_id', 'status',
            'created_at', 'completed_at', 'nickname', 'message', 'pay_system'
        ]
        
        self.headers_servers = [
            'id', 'name', 'url', 'is_active', 'is_default',
            'created_at', 'description'
        ]

    def clear_sheet(self, sheet, sheet_name):
        """–û—á–∏—â–∞–µ—Ç –ª–∏—Å—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é"""
        try:
            sheet.clear()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–∏—Å—Ç–∞ '{sheet_name}': {e}")
            raise

    def setup_headers(self, sheet, headers, sheet_name):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ª–∏—Å—Ç–∞"""
        try:
            sheet.append_row(headers)
            # –î–µ–ª–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∂–∏—Ä–Ω—ã–º–∏
        except Exception as e:
            raise

    async def sync_users(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            result = await session.execute(select(User).order_by(User.id))
            users = result.scalars().all()
            
            if not users:
                return
                

            # –û—á–∏—â–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            self.clear_sheet(sheet_users, "Users")
            self.setup_headers(sheet_users, self.headers_users, "Users")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
            rows_data = []
            for user in users:
                row = [
                    str(user.id),
                    str(user.telegram_id),
                    str(user.username) if user.username else "",
                    str(user.balance),
                    str(user.created_at),
                    str(user.subscription_start.strftime('%d.%m.%Y')) if user.subscription_start else "",
                    str(user.subscription_end.strftime('%d.%m.%Y')) if user.subscription_end else "",
                    str(user.is_active),
                    user.vpn_link if user.vpn_link else "",
                    str(user.server_id) if user.server_id else "",
                    str(user.trial_used)
                ]
                rows_data.append(row)
            
            # –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if rows_data:

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–∞—á–∫–∞–º–∏ –ø–æ 100 —Å—Ç—Ä–æ–∫ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
                batch_size = 100
                for i in range(0, len(rows_data), batch_size):
                    batch = rows_data[i:i + batch_size]
                    sheet_users.append_rows(batch)


    async def sync_payments(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏"""

        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏
            result = await session.execute(select(Payment).order_by(Payment.id))
            payments = result.scalars().all()
            
            if not payments:
                return
                

            # –û—á–∏—â–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            self.clear_sheet(sheet_payments, "Payments")
            self.setup_headers(sheet_payments, self.headers_payments, "Payments")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
            rows_data = []
            for payment in payments:
                row = [
                    str(payment.id),
                    str(payment.user_id),
                    str(payment.amount) if payment.amount else "",
                    str(payment.payment_id) if payment.payment_id else "",
                    str(payment.status),
                    str(payment.created_at.strftime('%d.%m.%Y')),
                    str(payment.completed_at.strftime('%d.%m.%Y')) if payment.completed_at else "",
                    str(payment.nickname) if payment.nickname else "",
                    str(payment.message) if payment.message else "",
                    str(payment.pay_system) if payment.pay_system else ""
                ]
                rows_data.append(row)
            
            # –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π
            if rows_data:

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–∞—á–∫–∞–º–∏ –ø–æ 100 —Å—Ç—Ä–æ–∫
                batch_size = 100
                for i in range(0, len(rows_data), batch_size):
                    batch = rows_data[i:i + batch_size]
                    sheet_payments.append_rows(batch)


    async def sync_servers(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã"""

        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã
            result = await session.execute(select(Server).order_by(Server.id))
            servers = result.scalars().all()
            
            if not servers:
                print("üì≠ –°–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
                

            # –û—á–∏—â–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            self.clear_sheet(sheet_servers, "Servers")
            self.setup_headers(sheet_servers, self.headers_servers, "Servers")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
            rows_data = []
            for server in servers:
                row = [
                    str(server.id),
                    str(server.name),
                    str(server.url),
                    str(server.is_active),
                    str(server.is_default),
                    str(server.created_at.strftime('%d.%m.%Y')),
                    str(server.description) if server.description else ""
                ]
                rows_data.append(row)
            
            # –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
            if rows_data:
                sheet_servers.append_rows(rows_data)

    async def get_database_stats(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

        async with async_session() as session:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            users_result = await session.execute(select(User))
            users_count = len(users_result.scalars().all())
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            active_users_result = await session.execute(select(User).where(User.is_active == True))
            active_users_count = len(active_users_result.scalars().all())
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å VPN
            vpn_users_result = await session.execute(select(User).where(User.vpn_link.isnot(None)))
            vpn_users_count = len(vpn_users_result.scalars().all())
            
            # –ü–ª–∞—Ç–µ–∂–∏
            payments_result = await session.execute(select(Payment))
            payments_count = len(payments_result.scalars().all())
            
            # –°–µ—Ä–≤–µ—Ä—ã
            servers_result = await session.execute(select(Server))
            servers_count = len(servers_result.scalars().all())


    async def full_sync(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é"""
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await self.get_database_stats()
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            await self.sync_users()
            await self.sync_payments()
            await self.sync_servers()

            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            import traceback
            traceback.print_exc()
            raise


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("üìã –°–ö–†–ò–ü–¢ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• –° GOOGLE SHEETS")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Google Sheets
    try:
        print("üîó –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets...")
        spreadsheet = client.open_by_key(spreadsheets_id)
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {spreadsheet.title}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets")
    print("   –∏ –∑–∞–ø–∏—à–µ—Ç –∏—Ö –∑–∞–Ω–æ–≤–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    
    if len(sys.argv) > 1 and sys.argv[1] == "--force":
        confirm = "y"
    else:
        confirm = input("\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").lower().strip()
    
    if confirm not in ['y', 'yes', '–¥–∞', '–¥']:
        print("‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    sync = SheetsSync()
    await sync.full_sync()


if __name__ == "__main__":
    asyncio.run(main()) 