import datetime
import asyncio
import httpx
import logging
import time
import uuid
from db.database import async_session
from db.models import User
from sqlalchemy import select, update
from aiogram import Bot
from config.config import BOT_TOKEN, ADMIN_NAME_1, ADMIN_NAME_2, API_TOKEN, API_URL


bot = Bot(token=BOT_TOKEN)
ADMINS = [ADMIN_NAME_1, ADMIN_NAME_2]
logger = logging.getLogger(__name__)

async def give_new_url(server_id: int):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ VPN —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
    """
    if not API_URL:
        logger.error("‚ùå API_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return
    
    async with async_session() as session:
        now = datetime.datetime.utcnow()
        result = await session.execute(select(User).where(
            User.subscription_end > now,
            User.is_active == True,
            User.server_id == server_id
        ))

        users = result.scalars().all()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {server_id}")
        
        success_count = 0
        error_count = 0
        
        for user in users:
            try:
                expire_timestamp = int(user.subscription_end.timestamp())
                response = await get_url(user.username, expire_timestamp)
                
                if response and 'subscription_url' in response:
                    new_url = response['subscription_url']
                    logger.info(f'–ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}: {new_url}')
                    

                    await session.execute(
                        update(User)
                        .where(User.id == user.id)
                        .values(vpn_link=new_url)
                    )
                    await session.commit()
                    

                    message = f"""
üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

–ü—Ä–∏–≤–µ—Ç, {user.username}! 

üéØ –ú—ã —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—É—é VPN —Å—Å—ã–ª–∫—É –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞

üîó –í–∞—à–∞ –Ω–æ–≤–∞—è VPN —Å—Å—ã–ª–∫–∞:
{new_url}

üìã –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ
2. –í—ã–±—Ä–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
3. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ \ –ø–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ
4. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–æ –æ–¥–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ

‚è∞ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ: {user.subscription_end.strftime('%d.%m.%Y %H:%M')}

‚ùì –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!
                    """
                    
                    try:
                        await bot.send_message(
                            user.telegram_id,
                            message
                        )
                        success_count += 1
                        logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
                        error_count += 1
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VPN —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")
                    error_count += 1
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}: {e}")
                error_count += 1
                continue

            time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        report_message = f"""
üìä –û—Ç—á–µ—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –Ω–æ–≤—ã—Ö VPN —Å—Å—ã–ª–æ–∫

üåê API URL: {API_URL}

üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}
‚ùå –û—à–∏–±–æ–∫: {error_count}
üë• –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(users)}

üïê –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {datetime.datetime.utcnow().strftime('%d.%m.%Y %H:%M:%S')} UTC
        """
        
        for admin_username in ADMINS:
            if admin_username:
                try:
                    admin_result = await session.execute(
                        select(User).where(User.username == admin_username.replace('@', ''))
                    )
                    admin_user = admin_result.scalar_one_or_none()
                    if admin_user:
                        await bot.send_message(admin_user.telegram_id, report_message)
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_username}: {e}")


async def get_url(username: str, expire_timestamp: int):
    headers = {
        "Authorization": f"Bearer {API_TOKEN}",
        "Content-Type": "application/json"
    }
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UUID –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_uuid = str(uuid.uuid4())
    
    request_data = {
        "username": username,
        "data_limit": 0,
        "data_limit_reset_strategy": "no_reset",
        "expire": expire_timestamp,
        "inbounds": {
            "vless": ["VLESS TCP REALITY"]
        },
        "next_plan": {
            "add_remaining_traffic": False,
            "data_limit": 0,
            "expire": 0,
            "fire_on_either": True
        },
        "note": "",
        "on_hold_expire_duration": 0,
        "on_hold_timeout": datetime.datetime.now().isoformat(),
        "proxies": {
            "vless": {
                "id": user_uuid
            }
        },
        "status": "active"
    }
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.post(
                f"{API_URL}/api/user",
                headers=headers,
                json=request_data
            )
            logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {username}: {response.status_code}")
            
            if response.status_code == 200:
                response_data = response.json()
                logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API –¥–ª—è {username}")
                return response_data
            else:
                logger.error(f"HTTP –æ—à–∏–±–∫–∞ –¥–ª—è {username}: {response.status_code}")
                logger.error(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
                return None

    except httpx.TimeoutException as e:
        logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è {username}: {e}")
        return None
    except httpx.HTTPStatusError as e:
        logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è {username}: {e}")
        logger.error(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
        return None
    except httpx.RequestError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è {username}: {e}")
        return None
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è {username}: {e}")
        logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        return None





if __name__ == "__main__":
    asyncio.run(give_new_url(2))
