#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy import select
from db.database import async_session
from db.models import User, Server
from db.service.server_service import get_all_servers, get_default_server

async def test_migration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤...\n")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ –ë–î
    print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
    async with async_session() as session:
        try:
            servers = await get_all_servers(session)
            default_server = await get_default_server(session)
            
            if not servers:
                print("   ‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä—ã –≤ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è fallback")
                from config.config import API_URL
                if API_URL:
                    print(f"   üì° Fallback URL: {API_URL}")
                else:
                    print("   ‚ùå Fallback URL —Ç–æ–∂–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            else:
                print(f"   üìä –í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ –ë–î: {len(servers)}")
                for server in servers:
                    status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if server.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                    default_mark = " üéØ" if default_server and server.id == default_server.id else ""
                    print(f"      {server.name}{default_mark}: {status}")
                    print(f"         ID: {server.id} | URL: {server.url}")
                    if server.description:
                        print(f"         üìù {server.description}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
            return
    
    print()
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print("2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    async with async_session() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ server_id
            result = await session.execute(select(User))
            users = result.scalars().all()
            
            if not users:
                print("   ‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç")
            else:
                print(f"   üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º
                server_stats = {}
                for user in users:
                    server_id = getattr(user, 'server_id', 1)  # Fallback –Ω–∞ 1 –µ—Å–ª–∏ –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                    if server_id not in server_stats:
                        server_stats[server_id] = 0
                    server_stats[server_id] += 1
                
                print("   üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º:")
                for server_id, count in server_stats.items():
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
                    server = await session.execute(select(Server).where(Server.id == server_id))
                    server_obj = server.scalar_one_or_none()
                    if server_obj:
                        server_name = server_obj.name
                    else:
                        server_name = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä"
                    print(f"      {server_name} (ID: {server_id}): {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                print("\n   üë• –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
                for i, user in enumerate(users[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 3
                    server_id = getattr(user, 'server_id', 1)
                    server = await session.execute(select(Server).where(Server.id == server_id))
                    server_obj = server.scalar_one_or_none()
                    server_name = server_obj.name if server_obj else f"–°–µ—Ä–≤–µ—Ä {server_id}"
                    print(f"      @{user.username}: {server_name} (ID: {server_id})")
                    
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ VPN –∫–ª–∏–µ–Ω—Ç–æ–≤
    print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ VPN –∫–ª–∏–µ–Ω—Ç–æ–≤:")
    async with async_session() as session:
        try:
            from bot.vpn_api import VPNClient
            servers = await get_all_servers(session)
            
            if not servers:
                print("   ‚ö†Ô∏è –ù–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ –ë–î, —Ç–µ—Å—Ç–∏—Ä—É–µ–º fallback...")
                try:
                    client = VPNClient.from_fallback()
                    print(f"   ‚úÖ Fallback –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    print(f"      URL: {client.base_url}")
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è fallback –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            else:
                for server in servers:
                    try:
                        client = VPNClient.from_server(server)
                        status = "‚úÖ –ì–æ—Ç–æ–≤" if server.is_active else "‚è∏Ô∏è –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                        print(f"   {status} {server.name}: VPN –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                        print(f"      URL: {client.base_url}")
                    except Exception as e:
                        print(f"   ‚ùå {server.name}: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VPN –∫–ª–∏–µ–Ω—Ç–∞ - {e}")
                        
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ VPN –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    try:
        await test_migration()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 