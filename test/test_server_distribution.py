import pytest
import asyncio
from db.database import async_session
from db.models import User, Server
from db.service.server_service import (
    get_default_server, create_server, set_default_server, 
    get_server_users_count, get_active_servers
)
from db.service.user_service import get_or_create_user
from bot.vpn_manager import VPNManager
from sqlalchemy import select, delete, update
from unittest.mock import Mock, patch, AsyncMock
import tempfile
import os


class MockTelegramUser:
    """Mock –∫–ª–∞—Å—Å –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    def __init__(self, id: int, username: str):
        self.id = id
        self.username = username


async def cleanup_test_data():
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    async with async_session() as session:
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await session.execute(delete(User).where(User.username.like('test_auto_%')))
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        await session.execute(delete(Server).where(Server.name.like('Test Auto Server%')))
        
        await session.commit()


async def create_test_servers(count: int = 3) -> list[Server]:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã"""
    servers = []
    async with async_session() as session:
        for i in range(1, count + 1):
            server = Server(
                name=f"Test Auto Server {i}",
                url=f"https://test-auto-{i}.com:8080",
                description=f"Test server {i} for automatic distribution",
                is_active=True,
                is_default=False  # –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –±–µ–∑ —Ñ–ª–∞–≥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            )
            session.add(server)
            
        await session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        result = await session.execute(
            select(Server).where(Server.name.like('Test Auto Server%')).order_by(Server.id)
        )
        servers = result.scalars().all()
        
    return servers


async def create_test_users_on_server(server_id: int, count: int) -> list[User]:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ"""
    users = []
    async with async_session() as session:
        for i in range(count):
            user = User(
                telegram_id=900000 + server_id * 1000 + i,  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID
                username=f"test_auto_server{server_id}_user{i}",
                balance=0.0,
                is_active=True,
                server_id=server_id,
                vpn_link=f"test://vpn-link-{server_id}-{i}"
            )
            session.add(user)
            users.append(user)
            
        await session.commit()
        
    return users


@pytest.mark.asyncio
async def test_automatic_distribution_logic():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
    """
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤...")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await cleanup_test_data()
    
    try:
        # ===== –≠–¢–ê–ü 1: –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã =====
        print("   üìä –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã...")
        servers = await create_test_servers(3)
        
        assert len(servers) == 3, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ 3 —Å–µ—Ä–≤–µ—Ä–∞"
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤")
        
        # ===== –≠–¢–ê–ü 2: –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ =====
        print("   üéØ –¢–µ—Å—Ç–∏—Ä—É—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (–±–µ–∑ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)...")
        
        async with async_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_server = await get_default_server(session)
            
            # –ü—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –¥–æ–ª–∂–µ–Ω –≤—ã–±–∏—Ä–∞—Ç—å—Å—è —Å–µ—Ä–≤–µ—Ä —Å –º–∏–Ω–∏–º—É–º–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –ø—É—Å—Ç—ã–µ, –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å—Å—è –ø–µ—Ä–≤—ã–π
            assert default_server is not None, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"
            print(f"   ‚úÖ –í—ã–±—Ä–∞–Ω —Å–µ—Ä–≤–µ—Ä: {default_server.name} (ID: {default_server.id})")
        
        # ===== –≠–¢–ê–ü 3: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ =====
        print("   üë• –î–æ–±–∞–≤–ª—è—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ã...")
        
        # –°–µ—Ä–≤–µ—Ä 1: 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await create_test_users_on_server(servers[0].id, 5)
        
        # –°–µ—Ä–≤–µ—Ä 2: 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
        await create_test_users_on_server(servers[1].id, 2)
        
        # –°–µ—Ä–≤–µ—Ä 3: 8 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await create_test_users_on_server(servers[2].id, 8)
        
        print(f"   üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: –°–µ—Ä–≤–µ—Ä 1 = 5, –°–µ—Ä–≤–µ—Ä 2 = 2, –°–µ—Ä–≤–µ—Ä 3 = 8")
        
        # ===== –≠–¢–ê–ü 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞ —Å –º–∏–Ω–∏–º—É–º–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π =====
        print("   üîç –ü—Ä–æ–≤–µ—Ä—è—é –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞ —Å –º–∏–Ω–∏–º—É–º–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        async with async_session() as session:
            # –ü—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å—Å—è —Å–µ—Ä–≤–µ—Ä 2 (–º–µ–Ω—å—à–µ –≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
            auto_server = await get_default_server(session)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
            selected_users_count = await get_server_users_count(session, auto_server.id)
            
            print(f"   üìä –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: {auto_server.name} —Å {selected_users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–µ—Ä–≤–µ—Ä —Å –º–∏–Ω–∏–º—É–º–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            all_users_counts = []
            for server in servers:
                count = await get_server_users_count(session, server.id)
                all_users_counts.append(count)
                print(f"      {server.name}: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            min_users = min(all_users_counts)
            assert selected_users_count == min_users, f"–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω —Å–µ—Ä–≤–µ—Ä —Å –º–∏–Ω–∏–º—É–º–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({min_users})"
            print(f"   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
        # ===== –≠–¢–ê–ü 5: –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é =====
        print("   üéØ –¢–µ—Å—Ç–∏—Ä—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
        
        async with async_session() as session:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä 3 (—Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π) –∫–∞–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            success = await set_default_server(session, servers[2].id)
            assert success, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–π—Ç–∏ —É—Å–ø–µ—à–Ω–æ"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä
            default_server = await get_default_server(session)
            assert default_server.id == servers[2].id, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
            
            users_count = await get_server_users_count(session, default_server.id)
            print(f"   ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–µ—Ä–≤–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_server.name} ({users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")
        
        # ===== –≠–¢–ê–ü 6: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ =====
        print("   üîÑ –í–æ–∑–≤—Ä–∞—â–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ...")
        
        async with async_session() as session:
            # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ is_default —É –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ (–≤–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
            await session.execute(update(Server).values(is_default=False))
            await session.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–Ω–æ–≤–∞ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Å–µ—Ä–≤–µ—Ä —Å –º–∏–Ω–∏–º—É–º–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            auto_server = await get_default_server(session)
            selected_users_count = await get_server_users_count(session, auto_server.id)
            
            # –î–æ–ª–∂–µ–Ω —Å–Ω–æ–≤–∞ –≤—ã–±—Ä–∞—Ç—å—Å—è —Å–µ—Ä–≤–µ—Ä 2 (—Å –º–∏–Ω–∏–º—É–º–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
            assert auto_server.id == servers[1].id, "–ü—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –¥–æ–ª–∂–µ–Ω –≤—ã–±–∏—Ä–∞—Ç—å—Å—è —Å–µ—Ä–≤–µ—Ä —Å –º–∏–Ω–∏–º—É–º–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            print(f"   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {auto_server.name} ({selected_users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
    finally:
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        await cleanup_test_data()


@pytest.mark.asyncio
async def test_server_load_balancing():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É –Ω–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    print("\n‚öñÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏...")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await cleanup_test_data()
    
    try:
        # –°–æ–∑–¥–∞–µ–º 2 —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        servers = await create_test_servers(2)
        
        # –ú–æ–∫–∞–µ–º VPN API —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        with patch('bot.vpn_manager.VPNClient') as mock_vpn_client:
            mock_instance = AsyncMock()
            mock_instance.create_vpn_config.return_value = {
                'subscription_url': 'test://vpn-config-link'
            }
            mock_vpn_client.from_server.return_value = mock_instance
            mock_vpn_client.from_fallback.return_value = mock_instance
            
            async with async_session() as session:
                vpn_manager = VPNManager(session)
                
                # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                test_users = []
                for i in range(6):  # 6 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    mock_user = MockTelegramUser(id=800000 + i, username=f"test_balance_user{i}")
                    user = await get_or_create_user(session, mock_user)
                    
                    # –°–æ–∑–¥–∞–µ–º VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞)
                    vpn_link = await vpn_manager.create_vpn_config(user, subscription_days=30)
                    assert vpn_link is not None, f"VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {i}"
                    
                    test_users.append(user)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º
                server1_users = await get_server_users_count(session, servers[0].id)
                server2_users = await get_server_users_count(session, servers[1].id)
                
                print(f"   üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
                print(f"      {servers[0].name}: {server1_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                print(f"      {servers[1].name}: {server2_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å
                total_distributed = server1_users + server2_users
                assert total_distributed == 6, f"–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ 6 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {total_distributed}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–æ–ª–µ–µ-–º–µ–Ω–µ–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ (—Ä–∞–∑–Ω–∏—Ü–∞ –Ω–µ –±–æ–ª—å—à–µ 1)
                difference = abs(server1_users - server2_users)
                assert difference <= 1, f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º, —Ä–∞–∑–Ω–∏—Ü–∞: {difference}"
                
                print(f"   ‚úÖ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –†–∞–∑–Ω–∏—Ü–∞: {difference}")
        
        print("\nüéâ –¢–µ—Å—Ç—ã –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
    finally:
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ  
        await cleanup_test_data()


@pytest.mark.asyncio
async def test_inactive_server_handling():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏
    """
    print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤...")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await cleanup_test_data()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã
        servers = await create_test_servers(3)
        
        async with async_session() as session:
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º 2 —Å–µ—Ä–≤–µ—Ä–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 1 –∞–∫—Ç–∏–≤–Ω—ã–π
            await session.execute(
                update(Server)
                .where(Server.id.in_([servers[0].id, servers[1].id]))
                .values(is_active=False)
            )
            await session.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
            default_server = await get_default_server(session)
            assert default_server is not None, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä"
            assert default_server.id == servers[2].id, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä"
            assert default_server.is_active == True, "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º"
            
            print(f"   ‚úÖ –í—ã–±—Ä–∞–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: {default_server.name}")
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã
            await session.execute(update(Server).values(is_active=False))
            await session.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –Ω–∞–π–¥–µ—Ç—Å—è –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
            no_server = await get_default_server(session)
            assert no_server is None, "–ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è None"
            
            print(f"   ‚úÖ –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è None")
        
        print("\nüéâ –¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
    finally:
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        await cleanup_test_data()


@pytest.mark.asyncio 
async def test_edge_cases():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    """
    print("\nüî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤...")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await cleanup_test_data()
    
    try:
        async with async_session() as session:
            # –°–õ–£–ß–ê–ô 1: –ù–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤–æ–æ–±—â–µ
            print("   üï≥Ô∏è –¢–µ—Å—Ç–∏—Ä—É—é —Å–ª—É—á–∞–π –±–µ–∑ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
            no_server = await get_default_server(session)
            assert no_server is None, "–ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è None"
            print("   ‚úÖ –ë–µ–∑ —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è None")
            
            # –°–õ–£–ß–ê–ô 2: –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —Å–µ—Ä–≤–µ—Ä, –Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
            print("   üí§ –¢–µ—Å—Ç–∏—Ä—É—é —Å–ª—É—á–∞–π —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º...")
            inactive_server = Server(
                name="Inactive Test Server",
                url="https://inactive.test.com",
                is_active=False,
                is_default=False
            )
            session.add(inactive_server)
            await session.commit()
            
            no_active_server = await get_default_server(session)
            assert no_active_server is None, "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–±–∏—Ä–∞—Ç—å—Å—è"
            print("   ‚úÖ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è")
            
            # –°–õ–£–ß–ê–ô 3: –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä
            print("   üîÑ –ê–∫—Ç–∏–≤–∏—Ä—É—é —Å–µ—Ä–≤–µ—Ä...")
            await session.execute(
                update(Server).where(Server.id == inactive_server.id).values(is_active=True)
            )
            await session.commit()
            
            active_server = await get_default_server(session)
            assert active_server is not None, "–ê–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω"
            assert active_server.id == inactive_server.id, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä"
            print(f"   ‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è: {active_server.name}")
        
        print("\nüéâ –¢–µ—Å—Ç—ã –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
    finally:
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        await cleanup_test_data()


if __name__ == "__main__":
    async def run_tests():
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤\n")
        
        try:
            await test_automatic_distribution_logic()
            await test_server_load_balancing()
            await test_inactive_server_handling()
            await test_edge_cases()
            
            print("\n" + "="*60)
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("="*60)
            
        except Exception as e:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
            import traceback
            traceback.print_exc()
            
        finally:
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
            await cleanup_test_data()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    asyncio.run(run_tests()) 