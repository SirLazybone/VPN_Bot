#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import asyncio
import sys
import os
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy import select
from db.database import async_session
from db.models import User, Server
from db.service.user_cleanup_service import (
    get_cleanup_stats, get_users_for_cleanup, cleanup_expired_users,
    mark_trial_as_used
)

async def create_test_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏"""
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    async with async_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        result = await session.execute(
            select(User).where(User.username.like('test_cleanup_%'))
        )
        existing_users = result.scalars().all()
        
        if existing_users:
            print(f"   ‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(existing_users)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –µ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä
        result = await session.execute(select(Server).limit(1))
        server = result.scalar_one_or_none()
        if not server:
            server = Server(
                name="Test Server",
                url="https://test.com",
                is_active=True,
                is_default=True,
                description="Test server for cleanup"
            )
            session.add(server)
            await session.commit()
            await session.refresh(server)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        test_users = [
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –±–æ–ª—å—à–µ –Ω–µ–¥–µ–ª–∏)
            User(
                telegram_id=999001,
                username="test_cleanup_expired",
                is_active=False,
                subscription_end=datetime.utcnow() - timedelta(days=10),
                vpn_link="vless://test-expired-config",
                server_id=server.id,
                trial_used=True
            ),
            # –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–Ω–µ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏)
            User(
                telegram_id=999002,
                username="test_cleanup_active",
                is_active=True,
                subscription_end=datetime.utcnow() + timedelta(days=30),
                vpn_link="vless://test-active-config",
                server_id=server.id,
                trial_used=False
            ),
            # –ù–µ–¥–∞–≤–Ω–æ –∏—Å—Ç–µ–∫—à–∏–π (–Ω–µ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ - –º–µ–Ω—å—à–µ –Ω–µ–¥–µ–ª–∏)
            User(
                telegram_id=999003,
                username="test_cleanup_recent",
                is_active=False,
                subscription_end=datetime.utcnow() - timedelta(days=3),
                vpn_link="vless://test-recent-config",
                server_id=server.id,
                trial_used=True
            ),
            # –ë–µ–∑ VPN –∫–æ–Ω—Ñ–∏–≥–∞ (–Ω–µ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏)
            User(
                telegram_id=999004,
                username="test_cleanup_no_vpn",
                is_active=False,
                subscription_end=datetime.utcnow() - timedelta(days=20),
                vpn_link=None,
                server_id=server.id,
                trial_used=False
            )
        ]
        
        for user in test_users:
            session.add(user)
        
        await session.commit()
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(test_users)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

async def test_cleanup_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –æ—á–∏—Å—Ç–∫–∏...")
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await get_cleanup_stats(session)
        print(f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}")
        print(f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_users']}")
        print(f"   üñ•Ô∏è –° VPN –∫–æ–Ω—Ñ–∏–≥–∞–º–∏: {stats['users_with_vpn']}")
        print(f"   üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π: {stats['trial_used_count']}")
        print(f"   üóëÔ∏è –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ –æ—á–∏—Å—Ç–∫—É: {stats['cleanup_candidates']}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        cleanup_candidates = await get_users_for_cleanup(session)
        print(f"\nüóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ ({len(cleanup_candidates)}):")
        
        for user in cleanup_candidates:
            days_since = (datetime.utcnow() - user.subscription_end).days if user.subscription_end else 0
            trial_mark = "üéØ" if user.trial_used else "‚≠ï"
            print(f"   {trial_mark} @{user.username} - –∏—Å—Ç–µ–∫–ª–∞ {days_since} –¥–Ω. –Ω–∞–∑–∞–¥")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º dry run
        print(f"\nüëÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞...")
        dry_result = await cleanup_expired_users(session, dry_run=True)
        print(f"   –ù–∞–π–¥–µ–Ω–æ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏: {dry_result['total_found']}")
        
        if dry_result['users']:
            print("   –î–µ—Ç–∞–ª–∏:")
            for user_info in dry_result['users']:
                print(f"     @{user_info['username']} (—Å–µ—Ä–≤–µ—Ä {user_info['server_id']}) - {user_info['days_since_expired']} –¥–Ω.")

async def test_trial_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞...")
    
    async with async_session() as session:
        # –ò—â–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        result = await session.execute(
            select(User).where(
                User.username == "test_cleanup_no_vpn",
                User.trial_used == False
            )
        )
        test_user = result.scalar_one_or_none()
        
        if test_user:
            print(f"   üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{test_user.username} –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
            
            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            await mark_trial_as_used(session, test_user)
            print(f"   ‚úÖ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            await session.refresh(test_user)
            print(f"   üéØ trial_used: {test_user.trial_used}")
        else:
            print("   ‚ÑπÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥")

async def cleanup_test_data():
    """–£–¥–∞–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    async with async_session() as session:
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        result = await session.execute(
            select(User).where(User.username.like('test_cleanup_%'))
        )
        test_users = result.scalars().all()
        
        for user in test_users:
            await session.delete(user)
        
        await session.commit()
        print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(test_users)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

async def test_auto_cleanup():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É (–∏–º–∏—Ç–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞)"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏...")
    
    try:
        from bot.scheduler import cleanup_vpn_servers
        print("   üîÑ –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏...")
        await cleanup_vpn_servers()
        print("   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –û–ß–ò–°–¢–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
        print("=" * 50)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        await create_test_data()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏
        await test_cleanup_logic()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        await test_trial_logic()
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É
        print(f"\n‚ùì –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É? (y/N): ", end="")
        try:
            response = input().strip().lower()
            if response == 'y':
                print("üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...")
                async with async_session() as session:
                    result = await cleanup_expired_users(session, dry_run=False)
                    print(f"   ‚úÖ –û—á–∏—â–µ–Ω–æ: {result['cleaned']}")
                    print(f"   ‚ùå –û—à–∏–±–æ–∫: {result['errors']}")
            else:
                print("   ‚ÑπÔ∏è –†–µ–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
        except (KeyboardInterrupt, EOFError):
            print("\n   ‚ÑπÔ∏è –í–≤–æ–¥ –ø—Ä–µ—Ä–≤–∞–Ω, —Ä–µ–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        await cleanup_test_data()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É
        await test_auto_cleanup()
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("\nüí° –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏:")
        print("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 02:00")
        print("   ‚Ä¢ –£–¥–∞–ª—è–µ–º —Å VPN —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å is_active=False")
        print("   ‚Ä¢ –ò –ø—Ä–æ—à–µ–¥—à–µ–π –Ω–µ–¥–µ–ª–µ–π —Å subscription_end")
        print("   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Å—Ç–∞—é—Ç—Å—è –≤ –±–æ—Ç–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è trial_used")
        print("   ‚Ä¢ –ê–¥–º–∏–Ω—ã –ø–æ–ª—É—á–∞—é—Ç –æ—Ç—á–µ—Ç—ã –æ–± –æ—á–∏—Å—Ç–∫–µ –≤ Telegram")
        print("   ‚Ä¢ –ü–æ–ª—è vpn_server_active –∏ last_vpn_activity –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 