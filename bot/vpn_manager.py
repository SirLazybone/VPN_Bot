from datetime import datetime, timedelta
from typing import Optional, Dict, Any
from sqlalchemy.ext.asyncio import AsyncSession
from db.models import User
from bot.vpn_api import VPNClient
from config.config import VPN_PRICE
from db.service.server_service import get_server_by_id, get_default_server, get_all_servers
from bot.vpn_logger import vpn_manager_logger as logger
import asyncio


class VPNManager:
    def __init__(self, db_session: AsyncSession):
        self.db = db_session

    async def _get_vpn_client(self, server_id: int) -> VPNClient:
        """–ü–æ–ª—É—á–∞–µ—Ç VPN –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
        logger.info(f"üîç –ü–æ–ª—É—á–∞—é VPN –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ ID: {server_id}")
        
        server = await get_server_by_id(self.db, server_id)
        if not server:
            logger.error(f"‚ùå –°–µ—Ä–≤–µ—Ä —Å ID {server_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise ValueError(f"–°–µ—Ä–≤–µ—Ä —Å ID {server_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–µ—Ä–≤–µ—Ä: {server.name} ({server.url})")
        
        if not server.is_active:
            logger.error(f"‚ùå –°–µ—Ä–≤–µ—Ä {server.name} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
            raise ValueError(f"–°–µ—Ä–≤–µ—Ä {server.name} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
        
        logger.info(f"‚úÖ –°–µ—Ä–≤–µ—Ä {server.name} –∞–∫—Ç–∏–≤–µ–Ω, —Å–æ–∑–¥–∞—é VPN –∫–ª–∏–µ–Ω—Ç")
        return VPNClient.from_server(server)

    async def _get_default_vpn_client(self) -> tuple[VPNClient, int]:
        """–ü–æ–ª—É—á–∞–µ—Ç VPN –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        logger.info("üîç –ü–æ–ª—É—á–∞—é VPN –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        
        server = await get_default_server(self.db)
        if not server:
            logger.warning("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞—é—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback")
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –Ω–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ –ë–î
            try:
                client = VPNClient.from_fallback()
                logger.info("‚úÖ –°–æ–∑–¥–∞–Ω fallback VPN –∫–ª–∏–µ–Ω—Ç")
                return client, 1  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID 1 –¥–ª—è fallback
            except ValueError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è fallback –∫–ª–∏–µ–Ω—Ç–∞: {e}")
                raise ValueError("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–µ—Ä–≤–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {server.name} (ID: {server.id})")
        return VPNClient.from_server(server), server.id

    async def create_vpn_config(
            self,
            user: User,
            subscription_days: int = 30,
            server_id: Optional[int] = None,
            is_trial: bool = False
    ) -> Optional[str]:
        """
        Create VPN configuration for a user and return the VPN link
        """
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}")
        logger.info(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: subscription_days={subscription_days}, server_id={server_id}, is_trial={is_trial}")
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if server_id is not None:
                logger.info(f"üéØ –ò—Å–ø–æ–ª—å–∑—É—é —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä ID: {server_id}")
                vpn_client = await self._get_vpn_client(server_id)
                assigned_server_id = server_id
            else:
                logger.info("üéØ –ò—Å–ø–æ–ª—å–∑—É—é —Å–µ—Ä–≤–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                vpn_client, assigned_server_id = await self._get_default_vpn_client()
            
            logger.info(f"‚úÖ VPN –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ ID: {assigned_server_id}")
            
            # Create VPN configuration
            logger.info(f"üì° –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
            vpn_config = await vpn_client.create_vpn_config(
                username=user.username,
                expire_days=subscription_days
            )

            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç VPN API: {vpn_config}")

            if not vpn_config:
                logger.error("‚ùå VPN API –≤–µ—Ä–Ω—É–ª None")
                return None
                
            if not vpn_config.get('links'):
                logger.error(f"‚ùå –í –æ—Ç–≤–µ—Ç–µ VPN API –Ω–µ—Ç –ø–æ–ª—è 'links': {vpn_config}")
                return None

            vpn_link = vpn_config['links'][0]
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ VPN —Å—Å—ã–ª–∫–∞: {vpn_link[:50]}...")

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info(f"üí∞ –°–ø–∏—Å—ã–≤–∞—é —Å –±–∞–ª–∞–Ω—Å–∞: {VPN_PRICE} —Ä—É–±. (—Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance})")
            user.balance -= VPN_PRICE
                
            user.vpn_link = vpn_link
            user.server_id = assigned_server_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–µ—Ä–≤–µ—Ä–∞
            user.subscription_start = datetime.utcnow()
            user.subscription_end = datetime.utcnow() + timedelta(days=subscription_days)
            user.is_active = True
            
            # –û—Ç–º–µ—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            if not is_trial:
                logger.info("üéØ –û—Ç–º–µ—á–∞—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞")
                user.trial_used = True

            logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            await self.db.commit()

            logger.info(f"üéâ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {user.username}")
            return vpn_link
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
            return None

    async def get_user_config(
            self,
            user: User
    ) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
        logger.info(f"üîç –ü–æ–ª—É—á–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}")
        
        if user.server_id is None:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –Ω–µ –∏–º–µ–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")
            return None
            
        try:
            logger.info(f"üì° –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É ID: {user.server_id}")
            vpn_client = await self._get_vpn_client(user.server_id)
            vpn_config = await vpn_client.get_vpn_config(user.username)
            
            if vpn_config:
                logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {user.username}")
            else:
                logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {user.username}")
                
            return vpn_config
        except ValueError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return None

    async def renew_subscription(
            self,
            user: User,
            subscription_days: Optional[int] = None,
            new_expire_ts: Optional[int] = None
    ) -> bool:
        """
        Renew user's VPN subscription on their assigned server
        –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é
        """
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}")
        logger.info(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: subscription_days={subscription_days}, new_expire_ts={new_expire_ts}")
        logger.info(f"üë§ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: server_id={user.server_id}, vpn_link={'–ï—Å—Ç—å' if user.vpn_link else '–ù–µ—Ç'}")
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç server_id –∏–ª–∏ vpn_link, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if user.server_id is None or user.vpn_link is None:
            logger.info(f"üÜï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –Ω–µ –∏–º–µ–µ—Ç VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, —Å–æ–∑–¥–∞—é –Ω–æ–≤—É—é")
            
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                vpn_client, assigned_server_id = await self._get_default_vpn_client()
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
                if new_expire_ts:
                    expire_ts = new_expire_ts
                    logger.info(f"‚è∞ –ò—Å–ø–æ–ª—å–∑—É—é –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π timestamp: {expire_ts}")
                else:
                    days = subscription_days or 30
                    expire_ts = int((datetime.utcnow() + timedelta(days=days)).timestamp())
                    logger.info(f"‚è∞ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π timestamp –Ω–∞ {days} –¥–Ω–µ–π: {expire_ts}")
                
                # –°–æ–∑–¥–∞–µ–º VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                logger.info("üì° –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
                vpn_config = await vpn_client.create_vpn_config(
                    username=user.username,
                    expire_days=subscription_days or 30
                )
                
                if not vpn_config or not vpn_config.get('links'):
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è {user.username}")
                    return False
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user.vpn_link = vpn_config['links'][0]
                user.server_id = assigned_server_id
                
                logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –ë–î...")
                await self.db.commit()
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è {user.username} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {assigned_server_id}")
                return True
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
                logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
                return False
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
        logger.info(f"üîÑ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, –æ–±–Ω–æ–≤–ª—è—é –µ—ë")
        try:
            vpn_client = await self._get_vpn_client(user.server_id)
        except ValueError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è VPN –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return False

        old_vpn_config = await self.get_user_config(user=user)
        if not old_vpn_config:
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ—Ç–µ—Ä—è–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {user.server_id}, —Å–æ–∑–¥–∞—é –Ω–æ–≤—É—é")
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞ —Ç–æ–º –∂–µ —Å–µ—Ä–≤–µ—Ä–µ
            try:
                vpn_client = await self._get_vpn_client(user.server_id)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
                if new_expire_ts:
                    expire_ts = new_expire_ts
                    logger.info(f"‚è∞ –ò—Å–ø–æ–ª—å–∑—É—é –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π timestamp: {expire_ts}")
                else:
                    days = subscription_days or 30
                    expire_ts = int((datetime.utcnow() + timedelta(days=days)).timestamp())
                    logger.info(f"‚è∞ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π timestamp –Ω–∞ {days} –¥–Ω–µ–π: {expire_ts}")
                
                logger.info("üì° –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞ —Ç–æ–º –∂–µ —Å–µ—Ä–≤–µ—Ä–µ...")
                vpn_config = await vpn_client.create_vpn_config(
                    username=user.username,
                    expire_days=subscription_days or 30
                )
                
                if vpn_config and vpn_config.get('links'):
                    user.vpn_link = vpn_config['links'][0]
                    logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –ë–î...")
                    await self.db.commit()
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è {user.username} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {user.server_id}")
                    return True
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è {user.username}")
                    return False
                    
            except ValueError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
                return False

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        logger.info("üîÑ –û–±–Ω–æ–≤–ª—è—é —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        old_expire_ts = old_vpn_config["expire"]
        now = datetime.utcnow().timestamp()
        
        logger.info(f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now} ({datetime.fromtimestamp(now)})")
        logger.info(f"‚è∞ –°—Ç–∞—Ä–æ–µ –∏—Å—Ç–µ—á–µ–Ω–∏–µ: {old_expire_ts} ({datetime.fromtimestamp(old_expire_ts)})")
        
        if old_expire_ts < now:
            base_time = datetime.utcnow()
            logger.info("‚è∞ –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, –ø—Ä–æ–¥–ª–µ–≤–∞—é –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
        else:
            base_time = datetime.utcfromtimestamp(old_expire_ts)
            logger.info("‚è∞ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–¥–ª–µ–≤–∞—é –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è")

        if new_expire_ts:
            new_expire = new_expire_ts
            logger.info(f"‚è∞ –ò—Å–ø–æ–ª—å–∑—É—é –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π timestamp: {new_expire}")
        else:
            new_expire = int((base_time + timedelta(days=subscription_days)).timestamp())
            logger.info(f"‚è∞ –ù–æ–≤–æ–µ –∏—Å—Ç–µ—á–µ–Ω–∏–µ: {new_expire} ({datetime.fromtimestamp(new_expire)})")

        # Update VPN configuration
        logger.info("üì° –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        vpn_config = await vpn_client.update_vpn_config(
            username=user.username,
            status="active",
            expire=new_expire
        )

        if not vpn_config or not vpn_config.get('links'):
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è {user.username}")
            return False

        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è {user.username} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {user.server_id}")
        return True

    async def delete_user(self, username: str, server_id: Optional[int] = None) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
        if server_id is not None:
            try:
                vpn_client = await self._get_vpn_client(server_id)
                response = await vpn_client.delete_user(username=username)
                return response == 200
            except ValueError as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞ {server_id}: {e}")
                return False
        else:
            # –ï—Å–ª–∏ server_id –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
            success = False
            servers = await get_all_servers(self.db)
            for server in servers:
                try:
                    vpn_client = VPNClient.from_server(server)
                    response = await vpn_client.delete_user(username=username)
                    if response == 200:
                        success = True
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞ {server.name}: {e}")
                    continue
            return success
        
