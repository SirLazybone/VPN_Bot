from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from db.database import async_session
from db.models import User
from sqlalchemy import select, update, or_, and_
from datetime import datetime, timedelta
from aiogram import Bot
from aiogram import types
from config.config import BOT_TOKEN, ADMIN_NAME_1, ADMIN_NAME_2
from db.service.user_cleanup_service import (
    cleanup_expired_users, get_cleanup_stats
)
import asyncio

bot = Bot(token=BOT_TOKEN)
scheduler = AsyncIOScheduler()
ADMINS = [ADMIN_NAME_1, ADMIN_NAME_2]

async def check_expired_subscriptions():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    async with async_session() as session:
        now = datetime.utcnow()
        stmt = select(User).where(
            User.subscription_end < now,
            User.is_active == True
        )
        result = await session.execute(stmt)
        expired_users = result.scalars().all()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
        for user in expired_users:
            try:
                await bot.send_message(
                    user.telegram_id,
                    "‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!\n\n",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=
                                                            [
                                                                [types.InlineKeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='update_sub')]
                                                            ])
                )
            except Exception as e:
                print(f"Error sending message to user {user.telegram_id}: {e}")
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            stmt = update(User).where(User.id == user.id).values(is_active=False)
            await session.execute(stmt)
            await session.commit()


async def check_upcoming_expirations():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –∏—Å—Ç–µ–∫–∞—é—â–∏–µ —á–µ—Ä–µ–∑ 1 –∏–ª–∏ 2 –¥–Ω—è –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    async with async_session() as session:
        now = datetime.utcnow()
        tomorrow_start = datetime.combine(now.date() + timedelta(days=1), datetime.min.time())
        tomorrow_end = datetime.combine(now.date() + timedelta(days=1), datetime.max.time())

        day_after_start = datetime.combine(now.date() + timedelta(days=2), datetime.min.time())
        day_after_end = datetime.combine(now.date() + timedelta(days=2), datetime.max.time())

        result = await session.execute(select(User).where(
            User.is_active == True,
            or_(
                and_(
                    User.subscription_end >= tomorrow_start,
                    User.subscription_end <= tomorrow_end
                ),
                and_(
                    User.subscription_end >= day_after_start,
                    User.subscription_end <= day_after_end
                )
            )
        ))
        users = result.scalars().all()

        for user in users:
            end_date = user.subscription_end.date()
            if end_date == (now.date() + timedelta(days=1)):
                message = (
                    "‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞!\n\n"
                )
            elif end_date == (now.date() + timedelta(days=2)):
                message = (
                    "‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 2 –¥–Ω—è!\n\n"
                )
            try:
                await bot.send_message(user.telegram_id, message, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=
                                                            [
                                                                [types.InlineKeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='update_sub')]
                                                            ]))
            except Exception as e:
                print(f"Error sending message to user {user.telegram_id}: {e}")

async def cleanup_vpn_servers():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ VPN —Å–µ—Ä–≤–µ—Ä–æ–≤ –æ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print(f"üßπ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ VPN —Å–µ—Ä–≤–µ—Ä–æ–≤ - {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')}")
    
    async with async_session() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –î–û –æ—á–∏—Å—Ç–∫–∏
            stats_before = await get_cleanup_stats(session)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
            cleanup_result = await cleanup_expired_users(session, dry_run=False)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ü–û–°–õ–ï –æ—á–∏—Å—Ç–∫–∏
            stats_after = await get_cleanup_stats(session)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            report = f"üßπ <b>–û—Ç—á–µ—Ç –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ VPN —Å–µ—Ä–≤–µ—Ä–æ–≤</b>\n"
            report += f"üìÖ –í—Ä–µ–º—è: {datetime.utcnow().strftime('%d.%m.%Y %H:%M:%S')}\n\n"
            
            report += f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—Å—Ç–∫–∏:\n"
            report += f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏: {cleanup_result['total_found']}\n"
            report += f"üóëÔ∏è –£—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ: {cleanup_result['cleaned']}\n"
            report += f"‚ùå –û—à–∏–±–æ–∫: {cleanup_result['errors']}\n\n"
            
            if cleanup_result['cleaned'] > 0:
                report += f"üë• <b>–û—á–∏—â–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
                for user_info in cleanup_result['users'][:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
                    if user_info.get('status') == 'cleaned':
                        trial_mark = "üéØ" if user_info['trial_used'] else "‚≠ï"
                        server_display = user_info['server_id'] if user_info['server_id'] else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
                        report += f"‚Ä¢ @{user_info['username']} {trial_mark} (—Å–µ—Ä–≤–µ—Ä {server_display})\n"
                        report += f"  –ò—Å—Ç–µ–∫–ª–∞ {user_info['days_since_expired']} –¥–Ω. –Ω–∞–∑–∞–¥\n"
                
                if cleanup_result['cleaned'] > 10:
                    report += f"... –∏ –µ—â–µ {cleanup_result['cleaned'] - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                report += "\n"
            
            report += f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ/–ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:</b>\n"
            report += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats_before['total_users']} ‚Üí {stats_after['total_users']}\n"
            report += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats_before['active_users']} ‚Üí {stats_after['active_users']}\n"
            report += f"üñ•Ô∏è –° VPN –∫–æ–Ω—Ñ–∏–≥–∞–º–∏: {stats_before['users_with_vpn']} ‚Üí {stats_after['users_with_vpn']}\n"
            report += f"üóëÔ∏è –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –æ—á–∏—Å—Ç–∫—É: {stats_before['cleanup_candidates']} ‚Üí {stats_after['cleanup_candidates']}\n"
            
            if cleanup_result['errors'] > 0:
                report += f"\n‚ö†Ô∏è <b>–û—à–∏–±–∫–∏ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:</b> {cleanup_result['errors']}\n"
                report += f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            for admin in ADMINS:
                if admin:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥–º–∏–Ω —É–∫–∞–∑–∞–Ω
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ telegram_id –∞–¥–º–∏–Ω–∞
                        result = await session.execute(
                            select(User).where(User.username == admin.replace('@', ''))
                        )
                        admin_user = result.scalar_one_or_none()
                        
                        if admin_user:
                            await bot.send_message(
                                admin_user.telegram_id,
                                report,
                                parse_mode='HTML'
                            )
                            print(f"‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É @{admin}")
                        else:
                            print(f"‚ö†Ô∏è –ê–¥–º–∏–Ω @{admin} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                            
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É @{admin}: {e}")
            
            print(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—á–∏—â–µ–Ω–æ: {cleanup_result['cleaned']}, –æ—à–∏–±–æ–∫: {cleanup_result['errors']}")
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ VPN —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}"
            print(error_msg)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—à–∏–±–∫–µ
            for admin in ADMINS:
                if admin:
                    try:
                        result = await session.execute(
                            select(User).where(User.username == admin.replace('@', ''))
                        )
                        admin_user = result.scalar_one_or_none()
                        
                        if admin_user:
                            await bot.send_message(
                                admin_user.telegram_id,
                                f"üö® **–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ VPN**\n\n"
                                f"üìÖ –í—Ä–µ–º—è: {datetime.utcnow().strftime('%d.%m.%Y %H:%M:%S')}\n"
                                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n\n"
                                f"–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã.",
                                parse_mode='Markdown'
                            )
                    except Exception as notify_error:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ @{admin} –æ–± –æ—à–∏–±–∫–µ: {notify_error}")

def start_scheduler():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –ø–æ–ª–Ω–æ—á—å
    scheduler.add_job(
        check_expired_subscriptions,
        CronTrigger(hour=9, minute=0),
        id='check_subscriptions',
        replace_existing=True
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞—é—Ç, –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12:00
    scheduler.add_job(
        check_upcoming_expirations,
        CronTrigger(hour=12, minute=0),
        id='check_upcoming_expirations',
        replace_existing=True
    )
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ VPN —Å–µ—Ä–≤–µ—Ä–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 02:00
    scheduler.add_job(
        cleanup_vpn_servers,
        CronTrigger(hour=2, minute=0),
        id='cleanup_vpn_servers',
        replace_existing=True
    )
    
    scheduler.start() 