from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Bot
from sqlalchemy import select, delete, update
from datetime import datetime, timezone
from db.database import async_session
from db.models import User, Payment, Server
from bot.handlers.home import process_home_action
from bot.vpn_manager import VPNManager
from sheets.sheets_service import update_user_by_telegram_id
from config.config import ADMIN_NAME_1, ADMIN_NAME_2, BOT_TOKEN
from db.service.server_service import (
    get_all_servers, get_server_by_id, create_server, 
    update_server, set_default_server, delete_server, get_default_server,
    get_servers_statistics, get_server_users_count, get_server_active_users_count,
    get_active_servers, reassign_users_to_server
)
import asyncio

router = Router()
bot = Bot(token=BOT_TOKEN)
ADMINS = [ADMIN_NAME_1, ADMIN_NAME_2]

# FSM states for admin actions
class AdminStates(StatesGroup):
    search_user = State()
    edit_balance = State()
    edit_subscription = State()
    confirm_delete = State()
    mail_everyone = State()
    mail_user = State()
    mail_type_choice = State()
    mail_photo = State()
    mail_photo_text = State()
    
    # –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞–º–∏
    add_server_name = State()
    add_server_url = State()
    add_server_description = State()
    edit_server_name = State()
    edit_server_url = State()
    edit_server_description = State()
    confirm_delete_server = State()

@router.message(F.text == "admin")
async def admin_handler(message: types.Message):
    if message.from_user.username not in ADMINS:
        await process_home_action(message)
        return
    
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_list_users")
            ],
            [
                types.InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏", callback_data="admin_search_user")
            ],
            [
                types.InlineKeyboardButton(text="üñ•Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏", callback_data="admin_servers")
            ],
            [
                types.InlineKeyboardButton(text="‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="init_mailing")
            ],
            [
                types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")
            ]
        ]
    )
    
    await message.answer("üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=keyboard)

@router.callback_query(F.data == "admin_panel")
async def admin_panel(callback: types.CallbackQuery):
    if callback.from_user.username not in ADMINS:
        await process_home_action(callback)
        return
    
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_list_users")
            ],
            [
                types.InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏", callback_data="admin_search_user")
            ],
            [
                types.InlineKeyboardButton(text="üñ•Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏", callback_data="admin_servers")
            ],
            [
                types.InlineKeyboardButton(text="‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="init_mailing")
            ],
            [
                types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")
            ]
        ]
    )
    
    await callback.message.edit_text("üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "admin_list_users")
async def list_users(callback: types.CallbackQuery):
    if callback.from_user.username not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    # Redirect to first page
    await list_users_page(callback, page=1)

@router.callback_query(F.data.startswith("admin_list_users_page_"))
async def list_users_page(callback: types.CallbackQuery, page: int = None):
    if callback.from_user.username not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    # Extract page number from callback data if not provided
    if page is None:
        page = int(callback.data.split("_")[4])
    
    users_per_page = 10
    offset = (page - 1) * users_per_page
    
    async with async_session() as session:
        # Get total count of users
        count_result = await session.execute(select(User))
        total_users = len(count_result.scalars().all())
        
        # Get users for current page
        result = await session.execute(
            select(User).order_by(User.id).offset(offset).limit(users_per_page)
        )
        users = result.scalars().all()
        
        if not users and page == 1:
            await callback.message.edit_text(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
                )
            )
            await callback.answer()
            return
        
        # Calculate total pages
        total_pages = (total_users + users_per_page - 1) // users_per_page
        
        # Create text with page info
        text = f"üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):\n"
        text += f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n\n"
        
        # Create keyboard with users in 2 columns
        keyboard = []
        
        # Add users in rows of 2
        for i in range(0, len(users), 2):
            row = []
            # First user in row
            user1 = users[i]
            status1 = "‚úÖ" if user1.is_active else "‚ùå"
            row.append(types.InlineKeyboardButton(
                text=f"{status1} {user1.username or f'ID{user1.id}'}",
                callback_data=f"admin_user_{user1.id}_{page}"
            ))
            
            # Second user in row (if exists)
            if i + 1 < len(users):
                user2 = users[i + 1]
                status2 = "‚úÖ" if user2.is_active else "‚ùå"
                row.append(types.InlineKeyboardButton(
                    text=f"{status2} {user2.username or f'ID{user2.id}'}",
                    callback_data=f"admin_user_{user2.id}_{page}"
                ))
            
            keyboard.append(row)
        
        # Add navigation buttons
        navigation_row = []
        
        # Previous page button
        if page > 1:
            navigation_row.append(types.InlineKeyboardButton(
                text="‚óÄÔ∏è –ü—Ä–µ–¥.",
                callback_data=f"admin_list_users_page_{page - 1}"
            ))
        
        # Next page button
        if page < total_pages:
            navigation_row.append(types.InlineKeyboardButton(
                text="–°–ª–µ–¥. ‚ñ∂Ô∏è",
                callback_data=f"admin_list_users_page_{page + 1}"
            ))
        
        if navigation_row:
            keyboard.append(navigation_row)
        
        # Add back button
        keyboard.append([types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")])
        
        await callback.message.edit_text(
            text,
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await callback.answer()

@router.callback_query(F.data.startswith("admin_user_"))
async def show_user_details(callback: types.CallbackQuery):
    if callback.from_user.username not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    # Extract user_id and optional page from callback data
    parts = callback.data.split("_")
    user_id = int(parts[2])
    page = int(parts[3]) if len(parts) > 3 else 1
    
    async with async_session() as session:
        result = await session.execute(select(User).where(User.id == user_id))
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.message.edit_text(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_list_users_page_{page}")]]
                )
            )
            await callback.answer()
            return
        
        # Format subscription dates
        sub_start = user.subscription_start.strftime("%d.%m.%Y %H:%M") if user.subscription_start else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        sub_end = user.subscription_end.strftime("%d.%m.%Y %H:%M") if user.subscription_end else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        
        text = f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"
        text += f"ID: {user.id}\n"
        text += f"Telegram ID: {user.telegram_id}\n"
        text += f"Username: @{user.username}\n"
        text += f"–ë–∞–ª–∞–Ω—Å: {user.balance} —Ä—É–±.\n"
        text += f"–ü–æ–¥–ø–∏—Å–∫–∞ —Å: {sub_start}\n"
        text += f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {sub_end}\n"
        text += f"–°–µ—Ä–≤–µ—Ä: {user.server_id if user.server_id else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n"
        text += f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if user.is_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
        text += f"–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {'üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' if user.trial_used else '‚≠ï –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω'}\n"
        text += f"VPN –∫–æ–Ω—Ñ–∏–≥: {'‚úÖ –ï—Å—Ç—å' if user.vpn_link else '‚ùå –ù–µ—Ç'}\n"
        
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"admin_edit_balance_{user.id}_{page}")
                ],
                [
                    types.InlineKeyboardButton(text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"admin_edit_subscription_{user.id}_{page}")
                ],
                [
                    types.InlineKeyboardButton(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"mail_user_{user.id}_{page}")
                ],
                [
                    types.InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"admin_delete_user_{user.id}_{page}")
                ],
                [
                    types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_list_users_page_{page}")
                ]
            ]
        )
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()

@router.callback_query(F.data == "admin_search_user")
async def search_user_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.username not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await state.set_state(AdminStates.search_user)
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]]
        )
    )
    await callback.answer()

@router.message(AdminStates.search_user)
async def search_user_process(message: types.Message, state: FSMContext):
    if message.from_user.username not in ADMINS:
        return

    username = message.text.strip()

    async with async_session() as session:
        result = await session.execute(select(User).where(User.username == username))
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
                )
            )
            return
        
        # Reset state
        await state.clear()
        
        # Show user details
        sub_start = user.subscription_start.strftime("%d.%m.%Y %H:%M") if user.subscription_start else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        sub_end = user.subscription_end.strftime("%d.%m.%Y %H:%M") if user.subscription_end else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        
        text = f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"
        text += f"ID: {user.id}\n"
        text += f"Telegram ID: {user.telegram_id}\n"
        text += f"Username: @{user.username}\n"
        text += f"–ë–∞–ª–∞–Ω—Å: {user.balance} —Ä—É–±.\n"
        text += f"–ü–æ–¥–ø–∏—Å–∫–∞ —Å: {sub_start}\n"
        text += f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {sub_end}\n"
        text += f"–°–µ—Ä–≤–µ—Ä: {user.server_id if user.server_id else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n"
        text += f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if user.is_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
        text += f"–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {'üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' if user.trial_used else '‚≠ï –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω'}\n"
        text += f"VPN –∫–æ–Ω—Ñ–∏–≥: {'‚úÖ –ï—Å—Ç—å' if user.vpn_link else '‚ùå –ù–µ—Ç'}\n"
        
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"admin_edit_balance_{user.id}")
                ],
                [
                    types.InlineKeyboardButton(text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"admin_edit_subscription_{user.id}")
                ],
                [
                    types.InlineKeyboardButton(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"mail_user_{user.id}")
                ],
                [
                    types.InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"admin_delete_user_{user.id}")
                ],
                [
                    types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
                ]
            ]
        )
        
        await message.answer(text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("admin_edit_balance_"))
async def edit_balance_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.username not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    parts = callback.data.split("_")
    user_id = int(parts[3])
    page = int(parts[4]) if len(parts) > 4 else 1
    
    await state.update_data(user_id=user_id, page=page)
    await state.set_state(AdminStates.edit_balance)
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"admin_user_{user_id}_{page}")]]
        )
    )
    await callback.answer()

@router.message(AdminStates.edit_balance)
async def edit_balance_process(message: types.Message, state: FSMContext):
    if message.from_user.username not in ADMINS:
        return
    
    try:
        new_balance = float(message.text.strip())
    except ValueError:
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]]
            )
        )
        return
    
    data = await state.get_data()
    user_id = data.get("user_id")
    page = data.get("page", 1)
    
    async with async_session() as session:
        result = await session.execute(select(User).where(User.id == user_id))
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
                )
            )
            await state.clear()
            return
        
        user.balance = new_balance
        await asyncio.gather(update_user_by_telegram_id(user.telegram_id, user))
        await session.commit()
        
        await state.clear()
        
        await message.answer(
            f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_balance} —Ä—É–±.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"admin_user_{user_id}_{page}")]]
            )
        )

@router.callback_query(F.data.startswith("admin_edit_subscription_"))
async def edit_subscription_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.username not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    parts = callback.data.split("_")
    user_id = int(parts[3])
    page = int(parts[4]) if len(parts) > 4 else 1
    
    await state.update_data(user_id=user_id, page=page)
    await state.set_state(AdminStates.edit_subscription)
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"admin_user_{user_id}_{page}")]]
        )
    )
    await callback.answer()

@router.message(AdminStates.edit_subscription)
async def edit_subscription_process(message: types.Message, state: FSMContext):
    if message.from_user.username not in ADMINS:
        return
    
    try:
        # Parse date in format DD.MM.YYYY
        date_str = message.text.strip()
        day, month, year = map(int, date_str.split('.'))
        new_date = datetime(year, month, day, 23, 59, 59)
    except (ValueError, IndexError):
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]]
            )
        )
        return
    
    data = await state.get_data()
    user_id = data.get("user_id")
    page = data.get("page", 1)
    
    async with async_session() as session:
        result = await session.execute(select(User).where(User.id == user_id))
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
                )
            )
            await state.clear()
            return
        
        # If no subscription_start, set it to now
        if not user.subscription_start:
            user.subscription_start = datetime.utcnow()
        
        user.subscription_end = new_date
        user.is_active = True  # Activate user when setting subscription

        vpn_manager = VPNManager(session)
        vpn_success = await vpn_manager.renew_subscription(user=user, new_expire_ts=int(new_date.timestamp()))
        
        if vpn_success:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π VPN —Å—Å—ã–ª–∫–∏
            await session.refresh(user)
            
        await asyncio.gather(update_user_by_telegram_id(user.telegram_id, user))
        await session.commit()

        await state.clear()
        
        formatted_date = new_date.strftime("%d.%m.%Y %H:%M")
        
        if vpn_success:
            success_message = f"‚úÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {formatted_date}"
            if user.vpn_link:
                success_message += "\nüîê VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
        else:
            success_message = f"‚ö†Ô∏è –î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {formatted_date}, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"
        
        await message.answer(
            success_message,
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"admin_user_{user_id}_{page}")]]
            )
        )

@router.callback_query(F.data.startswith("admin_delete_user_"))
async def delete_user_confirm(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.username not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    parts = callback.data.split("_")
    user_id = int(parts[3])
    page = int(parts[4]) if len(parts) > 4 else 1
    
    await state.update_data(user_id=user_id, page=page)
    
    async with async_session() as session:
        result = await session.execute(select(User).where(User.id == user_id))
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.message.edit_text(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
                )
            )
            await callback.answer()
            return
        
        await state.set_state(AdminStates.confirm_delete)
        
        await callback.message.edit_text(
            f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username} (ID: {user.id})?",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"admin_confirm_delete_{user.id}_{page}")
                    ],
                    [
                        types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"admin_user_{user.id}_{page}")
                    ]
                ]
            )
        )
        await callback.answer()

@router.callback_query(F.data.startswith("admin_confirm_delete_"))
async def delete_user_process(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.username not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    parts = callback.data.split("_")
    user_id = int(parts[3])
    page = int(parts[4]) if len(parts) > 4 else 1
    
    async with async_session() as session:
        result = await session.execute(select(User).where(User.id == user_id))
        user = result.scalar_one_or_none()

        
        if not user:
            await callback.message.edit_text(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
                )
            )
            await callback.answer()
            await state.clear()
            return
        
        # Remember username for confirmation message
        username = user.username
        
        # Delete user
        await session.execute(delete(Payment).where(Payment.nickname == username))
        await session.execute(delete(User).where(User.id == user_id))
        vpn_manager = VPNManager(session)
        text = ""
        if await vpn_manager.delete_user(username, server_id=user.server_id):
            text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
        else:
            text = "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
        await session.commit()
        
        await state.clear()
        
        await callback.message.edit_text(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –≤ –±–æ—Ç–µ\n" + text,
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data=f"admin_list_users_page_{page}")]]
            )
        )
        await callback.answer()


@router.callback_query(F.data == "init_mailing")
async def init_mail_everyone(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.username not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await state.set_state(AdminStates.mail_type_choice)

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üìù –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç", callback_data="mail_text_only")
            ],
            [
                types.InlineKeyboardButton(text="üñºÔ∏è –¢–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π", callback_data="mail_with_photo")
            ],
            [
                types.InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")
            ]
        ]
    )

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=keyboard
    )
    await callback.answer()


@router.message(AdminStates.mail_everyone)
async def mail_everyone(message: types.Message, state: FSMContext):
    if message.from_user.username not in ADMINS:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    mail = message.text

    await state.clear()

    async with async_session() as session:
        result = await session.execute(select(User))
        users = result.scalars().all()

        success_count = 0
        error_count = 0

        for user in users:
            try:
                await bot.send_message(
                    user.telegram_id,
                    text=mail
                )
                success_count += 1
            except Exception as e:
                error_count += 1
                print(f"Error sending message to user {user.username}: {e}")

        await message.answer(
            f"–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n"
            f"–£—Å–ø–µ—à–Ω–æ: {success_count}\n"
            f"–û—à–∏–±–æ–∫: {error_count}",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
            )
        )


@router.callback_query(F.data.startswith("mail_user_"))
async def init_mail_user(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.username not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    parts = callback.data.split("_")
    user_id = int(parts[2])
    page = int(parts[3]) if len(parts) > 3 else 1

    await state.set_state(AdminStates.mail_user)
    await state.update_data(user_id=user_id, page=page)

    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"admin_user_{user_id}_{page}")]]
        )
    )
    await callback.answer()

@router.message(AdminStates.mail_user)
async def mail_user(message: types.Message, state: FSMContext):
    if message.from_user.username not in ADMINS:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    mail = message.text
    data = await state.get_data()
    user_id = data.get("user_id")
    page = data.get("page")

    async with async_session() as session:
        result = await session.execute(select(User).where(User.id == user_id))
        user = result.scalar_one_or_none()

        if not user:
            await message.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
                )
            )
            await state.clear()
            return

        try:
            await bot.send_message(
                user.telegram_id,
                text=mail
            )
            await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username}",
                                 reply_markup=types.InlineKeyboardMarkup(
                                     inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                                                                                  callback_data=f"admin_user_{user_id}_{page}")]]
                                 ))
            await state.clear()
        except Exception as e:
            await message.answer(f"Error sending message to user {user.username}: {e}")

@router.callback_query(F.data == "mail_text_only")
async def mail_text_only(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.username not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await state.set_state(AdminStates.mail_everyone)

    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]]
        )
    )
    await callback.answer()


@router.callback_query(F.data == "mail_with_photo")
async def mail_with_photo_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.username not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await state.set_state(AdminStates.mail_photo)

    await callback.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É:",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]]
        )
    )
    await callback.answer()


@router.message(AdminStates.mail_photo, F.photo)
async def handle_mail_photo(message: types.Message, state: FSMContext):
    if message.from_user.username not in ADMINS:
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –∫–∞—Ä—Ç–∏–Ω–∫–∏
    photo_file_id = message.photo[-1].file_id
    await state.update_data(photo_file_id=photo_file_id)
    await state.set_state(AdminStates.mail_photo_text)

    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π:",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]]
        )
    )


@router.message(AdminStates.mail_photo_text)
async def mail_photo_with_text(message: types.Message, state: FSMContext):
    if message.from_user.username not in ADMINS:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    text = message.text
    data = await state.get_data()
    photo_file_id = data.get("photo_file_id")

    await state.clear()

    async with async_session() as session:
        result = await session.execute(select(User))
        users = result.scalars().all()

        success_count = 0
        error_count = 0

        for user in users:
            try:
                await bot.send_photo(
                    user.telegram_id,
                    photo=photo_file_id,
                    caption=text
                )
                success_count += 1
            except Exception as e:
                error_count += 1
                print(f"Error sending message to user {user.username}: {e}")

        await message.answer(
            f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n"
            f"–£—Å–ø–µ—à–Ω–æ: {success_count}\n"
            f"–û—à–∏–±–æ–∫: {error_count}",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
            )
        )


# ======================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–†–í–ï–†–ê–ú–ò ========================

@router.callback_query(F.data == "admin_servers")
async def admin_servers_menu(callback: types.CallbackQuery):
    if callback.from_user.username not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    async with async_session() as session:
        stats = await get_servers_statistics(session)
        default_server = await get_default_server(session)

        text = "üñ•Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏\n\n"
        
        if stats["total_servers"] == 0:
            text += "üì≠ –°–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\n"
            text += "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ .env"
        else:
            text += f"üìä –í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {stats['total_servers']}\n"
            text += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_servers']}\n\n"
            
            for server_data in stats["servers_data"]:
                status = "‚úÖ" if server_data["is_active"] else "‚ùå"
                default_mark = " üéØ" if default_server and server_data["id"] == default_server.id else ""
                
                text += f"{status} {server_data['name']}{default_mark}\n"
                text += f"   ID: {server_data['id']} | URL: {server_data['url']}\n"
                text += f"   üë• –í—Å–µ–≥–æ: {server_data['total_users']} | –ê–∫—Ç–∏–≤–Ω—ã—Ö: {server_data['active_users']}\n"
                
                if server_data["description"]:
                    text += f"   üìù {server_data['description']}\n"
                text += "\n"
        
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="add_server")
                ],
                [
                    types.InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="list_servers")
                ],
                [
                    types.InlineKeyboardButton(text="üéØ –°–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π", callback_data="change_default_server")
                ],
                [
                    types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
                ]
            ]
        )
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()

@router.callback_query(F.data == "list_servers")
async def list_servers_menu(callback: types.CallbackQuery):
    if callback.from_user.username not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    # Redirect to first page
    await list_servers_page(callback, page=1)

@router.callback_query(F.data.startswith("list_servers_page_"))
async def list_servers_page(callback: types.CallbackQuery, page: int = None):
    if callback.from_user.username not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    # Extract page number from callback data if not provided
    if page is None:
        page = int(callback.data.split("_")[3])
    
    servers_per_page = 5
    offset = (page - 1) * servers_per_page
    
    async with async_session() as session:
        all_servers = await get_all_servers(session)
        total_servers = len(all_servers)
        
        if total_servers == 0:
            await callback.message.edit_text(
                "üì≠ –°–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_servers")]]
                )
            )
            await callback.answer()
            return
        
        # Get servers for current page
        servers = all_servers[offset:offset + servers_per_page]
        
        # Calculate total pages
        total_pages = (total_servers + servers_per_page - 1) // servers_per_page
        
        # Create text with page info
        text = f"üìã –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):\n"
        text += f"–í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {total_servers}\n\n"
        
        # Create keyboard with servers
        keyboard = []
        for server in servers:
            status = "‚úÖ" if server.is_active else "‚ùå"
            keyboard.append([
                types.InlineKeyboardButton(
                    text=f"{status} {server.name}",
                    callback_data=f"server_details_{server.id}_{page}"
                )
            ])
        
        # Add navigation buttons
        navigation_row = []
        
        # Previous page button
        if page > 1:
            navigation_row.append(types.InlineKeyboardButton(
                text="‚óÄÔ∏è –ü—Ä–µ–¥.",
                callback_data=f"list_servers_page_{page - 1}"
            ))
        
        # Next page button
        if page < total_pages:
            navigation_row.append(types.InlineKeyboardButton(
                text="–°–ª–µ–¥. ‚ñ∂Ô∏è",
                callback_data=f"list_servers_page_{page + 1}"
            ))
        
        if navigation_row:
            keyboard.append(navigation_row)
        
        # Add back button
        keyboard.append([types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_servers")])
        
        await callback.message.edit_text(
            text,
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await callback.answer()

@router.callback_query(F.data.startswith("server_details_"))
async def server_details(callback: types.CallbackQuery):
    if callback.from_user.username not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    parts = callback.data.split("_")
    server_id = int(parts[2])
    page = int(parts[3]) if len(parts) > 3 else 1  # Get page from callback data if available
    
    async with async_session() as session:
        server = await get_server_by_id(session, server_id)
        default_server = await get_default_server(session)
        
        if not server:
            await callback.message.edit_text(
                "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"list_servers_page_{page}")]]
                )
            )
            await callback.answer()
            return
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        total_users = await get_server_users_count(session, server_id)
        active_users = await get_server_active_users_count(session, server_id)
        
        is_default = default_server and server.id == default_server.id
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if server.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        default_text = " (–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é)" if is_default else ""
        
        text = f"üñ•Ô∏è –°–µ—Ä–≤–µ—Ä: {server.name}{default_text}\n\n"
        text += f"ID: {server.id}\n"
        text += f"URL: {server.url}\n"
        text += f"–°—Ç–∞—Ç—É—Å: {status}\n"
        text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        text += f"üñ•Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞ VPN: {active_users}\n"
        text += f"üìÖ –°–æ–∑–¥–∞–Ω: {server.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        
        if server.description:
            text += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{server.description}"
        
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        if server.is_active:
            keyboard.append([types.InlineKeyboardButton(text="‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"toggle_server_{server_id}_{page}")])
        else:
            keyboard.append([types.InlineKeyboardButton(text="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"toggle_server_{server_id}_{page}")])
        
        # –ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not is_default and server.is_active:
            keyboard.append([types.InlineKeyboardButton(text="üéØ –°–¥–µ–ª–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–º", callback_data=f"set_default_{server_id}_{page}")])
        
        keyboard.extend([
            [types.InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_server_{server_id}_{page}")],
            [types.InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_server_{server_id}_{page}")],
            [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"list_servers_page_{page}")]
        ])
        
        await callback.message.edit_text(
            text,
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await callback.answer()

@router.callback_query(F.data == "add_server")
async def add_server_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.username not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await state.set_state(AdminStates.add_server_name)
    
    await callback.message.edit_text(
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞:",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_servers")]]
        )
    )
    await callback.answer()

@router.message(AdminStates.add_server_name)
async def add_server_name_process(message: types.Message, state: FSMContext):
    if message.from_user.username not in ADMINS:
        return
    
    server_name = message.text.strip()
    if not server_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(server_name=server_name)
    await state.set_state(AdminStates.add_server_url)
    
    await message.answer(
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {server_name}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ URL API —Å–µ—Ä–≤–µ—Ä–∞ (—Ñ–æ—Ä–º–∞—Ç: https://exmaple.name:8080):",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_servers")]]
        )
    )

@router.message(AdminStates.add_server_url)
async def add_server_url_process(message: types.Message, state: FSMContext):
    if message.from_user.username not in ADMINS:
        return
    
    server_url = message.text.strip()
    if not server_url.startswith(('http://', 'https://')):
        await message.answer("‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(server_url=server_url)
    await state.set_state(AdminStates.add_server_description)
    
    data = await state.get_data()
    await message.answer(
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['server_name']}\n"
        f"URL: {server_url}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_servers")]]
        )
    )

@router.message(AdminStates.add_server_description)
async def add_server_description_process(message: types.Message, state: FSMContext):
    if message.from_user.username not in ADMINS:
        return
    
    description = message.text.strip()
    if description == '-':
        description = None
    
    data = await state.get_data()
    
    async with async_session() as session:
        try:
            server = await create_server(
                session=session,
                name=data['server_name'],
                url=data['server_url'],
                description=description
            )
            
            await state.clear()
            
            await message.answer(
                f"‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {server.name}\n"
                f"URL: {server.url}\n"
                f"ID: {server.id}",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–µ—Ä–≤–µ—Ä–∞–º", callback_data="admin_servers")]]
                )
            )
            
        except Exception as e:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_servers")]]
                )
            )
            await state.clear()

@router.callback_query(F.data.startswith("toggle_server_"))
async def toggle_server_status(callback: types.CallbackQuery):
    if callback.from_user.username not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    parts = callback.data.split("_")
    server_id = int(parts[2])
    page = int(parts[3]) if len(parts) > 3 else 1
    
    async with async_session() as session:
        server = await get_server_by_id(session, server_id)
        if not server:
            await callback.answer("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        new_status = not server.is_active
        success = await update_server(session, server_id, is_active=new_status)
        
        if success:
            status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if new_status else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
            await callback.answer(f"‚úÖ –°–µ—Ä–≤–µ—Ä {status_text}")
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            callback.data = f"server_details_{server_id}_{page}"
            await server_details(callback)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)

@router.callback_query(F.data.startswith("set_default_"))
async def set_default_server_handler(callback: types.CallbackQuery):
    if callback.from_user.username not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    parts = callback.data.split("_")
    server_id = int(parts[2])
    page = int(parts[3]) if len(parts) > 3 else 1
    
    async with async_session() as session:
        success = await set_default_server(session, server_id)
        
        if success:
            await callback.answer("‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π")
            
            # –ï—Å–ª–∏ –≤—ã–∑–æ–≤ –±—ã–ª –∏–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è —Ç—É–¥–∞
            if len(parts) > 3:
                callback.data = f"server_details_{server_id}_{page}"
                await server_details(callback)
            else:
                # –ï—Å–ª–∏ –≤—ã–∑–æ–≤ –±—ã–ª –∏–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è —Ç—É–¥–∞
                await change_default_server_page(callback, page=1)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞", show_alert=True)

@router.callback_query(F.data == "change_default_server")
async def change_default_server_menu(callback: types.CallbackQuery):
    if callback.from_user.username not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    # Redirect to first page
    await change_default_server_page(callback, page=1)

@router.callback_query(F.data.startswith("change_default_page_"))
async def change_default_server_page(callback: types.CallbackQuery, page: int = None):
    if callback.from_user.username not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    # Extract page number from callback data if not provided
    if page is None:
        page = int(callback.data.split("_")[3])
    
    servers_per_page = 5
    offset = (page - 1) * servers_per_page
    
    async with async_session() as session:
        servers = await get_all_servers(session)
        active_servers = [s for s in servers if s.is_active]
        default_server = await get_default_server(session)
        
        if not active_servers:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_servers")]]
                )
            )
            await callback.answer()
            return
        
        # Get servers for current page
        servers_page = active_servers[offset:offset + servers_per_page]
        
        # Calculate total pages
        total_pages = (len(active_servers) + servers_per_page - 1) // servers_per_page
        
        # Create text with page info
        text = f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):\n"
        text += f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(active_servers)}\n\n"
        
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ" —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if page == 1:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–æ –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            auto_distribution_active = default_server is None
            auto_prefix = "üéØ " if auto_distribution_active else "   "
            keyboard.append([
                types.InlineKeyboardButton(
                    text=f"{auto_prefix}ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
                    callback_data="set_auto_distribution"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        for server in servers_page:
            is_current = default_server and server.id == default_server.id
            text_prefix = "üéØ " if is_current else "   "
            keyboard.append([
                types.InlineKeyboardButton(
                    text=f"{text_prefix}{server.name}",
                    callback_data=f"set_default_{server.id}"
                )
            ])
        
        # Add navigation buttons
        navigation_row = []
        
        # Previous page button
        if page > 1:
            navigation_row.append(types.InlineKeyboardButton(
                text="‚óÄÔ∏è –ü—Ä–µ–¥.",
                callback_data=f"change_default_page_{page - 1}"
            ))
        
        # Next page button
        if page < total_pages:
            navigation_row.append(types.InlineKeyboardButton(
                text="–°–ª–µ–¥. ‚ñ∂Ô∏è",
                callback_data=f"change_default_page_{page + 1}"
            ))
        
        if navigation_row:
            keyboard.append(navigation_row)
        
        # Add back button
        keyboard.append([types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_servers")])
        
        await callback.message.edit_text(
            text,
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await callback.answer()

@router.callback_query(F.data == "set_auto_distribution")
async def set_auto_distribution(callback: types.CallbackQuery):
    if callback.from_user.username not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    async with async_session() as session:
        # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ is_default —É –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ (–≤–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
        await session.execute(update(Server).values(is_default=False))
        await session.commit()
        
        await callback.answer("‚úÖ –í–∫–ª—é—á–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        await change_default_server_page(callback, page=1)

@router.callback_query(F.data.startswith("edit_server_"))
async def edit_server_handler(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.username not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    parts = callback.data.split("_")
    server_id = int(parts[2])
    page = int(parts[3]) if len(parts) > 3 else 1
    
    async with async_session() as session:
        server = await get_server_by_id(session, server_id)
        if not server:
            await callback.answer("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        await state.update_data(server_id=server_id, page=page, original_server=server)
        
        # –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_server_name_{server_id}_{page}")],
                [types.InlineKeyboardButton(text="üåê URL", callback_data=f"edit_server_url_{server_id}_{page}")],
                [types.InlineKeyboardButton(text="üìÑ –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_server_desc_{server_id}_{page}")],
                [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"server_details_{server_id}_{page}")]
            ]
        )
        
        text = f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞: {server.name}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()

@router.callback_query(F.data.startswith("edit_server_name_"))
async def edit_server_name_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.username not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    parts = callback.data.split("_")
    server_id = int(parts[3])
    page = int(parts[4]) if len(parts) > 4 else 1
    
    await state.update_data(server_id=server_id, page=page, edit_field="name")
    await state.set_state(AdminStates.edit_server_name)
    
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞:",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_server_{server_id}_{page}")]]
        )
    )
    await callback.answer()

@router.callback_query(F.data.startswith("edit_server_url_"))
async def edit_server_url_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.username not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    parts = callback.data.split("_")
    server_id = int(parts[3])
    page = int(parts[4]) if len(parts) > 4 else 1
    
    await state.update_data(server_id=server_id, page=page, edit_field="url")
    await state.set_state(AdminStates.edit_server_url)
    
    await callback.message.edit_text(
        "üåê –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL —Å–µ—Ä–≤–µ—Ä–∞ (—Ñ–æ—Ä–º–∞—Ç: https://example.com:8080):",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_server_{server_id}_{page}")]]
        )
    )
    await callback.answer()

@router.callback_query(F.data.startswith("edit_server_desc_"))
async def edit_server_description_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.username not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    parts = callback.data.split("_")
    server_id = int(parts[3])
    page = int(parts[4]) if len(parts) > 4 else 1
    
    await state.update_data(server_id=server_id, page=page, edit_field="description")
    await state.set_state(AdminStates.edit_server_description)
    
    await callback.message.edit_text(
        "üìÑ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ):",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_server_{server_id}_{page}")]]
        )
    )
    await callback.answer()

@router.message(AdminStates.edit_server_name)
async def edit_server_name_process(message: types.Message, state: FSMContext):
    if message.from_user.username not in ADMINS:
        return
    
    new_name = message.text.strip()
    if not new_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    data = await state.get_data()
    server_id = data.get("server_id")
    page = data.get("page", 1)
    
    async with async_session() as session:
        success = await update_server(session, server_id, name=new_name)
        
        if success:
            await message.answer(
                f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–µ—Ä–≤–µ—Ä—É", callback_data=f"server_details_{server_id}_{page}")]]
                )
            )
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–µ—Ä–≤–µ—Ä—É", callback_data=f"server_details_{server_id}_{page}")]]
                )
            )
    
    await state.clear()

@router.message(AdminStates.edit_server_url)
async def edit_server_url_process(message: types.Message, state: FSMContext):
    if message.from_user.username not in ADMINS:
        return
    
    new_url = message.text.strip()
    if not new_url.startswith(('http://', 'https://')):
        await message.answer("‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    data = await state.get_data()
    server_id = data.get("server_id")
    page = data.get("page", 1)
    
    async with async_session() as session:
        success = await update_server(session, server_id, url=new_url)
        
        if success:
            await message.answer(
                f"‚úÖ URL —Å–µ—Ä–≤–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_url}",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–µ—Ä–≤–µ—Ä—É", callback_data=f"server_details_{server_id}_{page}")]]
                )
            )
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ URL —Å–µ—Ä–≤–µ—Ä–∞",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–µ—Ä–≤–µ—Ä—É", callback_data=f"server_details_{server_id}_{page}")]]
                )
            )
    
    await state.clear()

@router.message(AdminStates.edit_server_description)
async def edit_server_description_process(message: types.Message, state: FSMContext):
    if message.from_user.username not in ADMINS:
        return
    
    new_description = message.text.strip()
    if new_description == '-':
        new_description = None
    
    data = await state.get_data()
    server_id = data.get("server_id")
    page = data.get("page", 1)
    
    async with async_session() as session:
        success = await update_server(session, server_id, description=new_description)
        
        if success:
            desc_text = "—É–¥–∞–ª–µ–Ω–æ" if new_description is None else f"–∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_description}"
            await message.answer(
                f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ {desc_text}",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–µ—Ä–≤–µ—Ä—É", callback_data=f"server_details_{server_id}_{page}")]]
                )
            )
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–µ—Ä–≤–µ—Ä—É", callback_data=f"server_details_{server_id}_{page}")]]
                )
            )
    
    await state.clear()

@router.callback_query(F.data.startswith("delete_server_"))
async def delete_server_handler(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.username not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    parts = callback.data.split("_")
    server_id = int(parts[2])
    page = int(parts[3]) if len(parts) > 3 else 1
    
    async with async_session() as session:
        server = await get_server_by_id(session, server_id)
        if not server:
            await callback.answer("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        users_count = await get_server_users_count(session, server_id)
        active_users_count = await get_server_active_users_count(session, server_id)
        
        await state.update_data(server_id=server_id, page=page, server=server)
        await state.set_state(AdminStates.confirm_delete_server)
        
        if users_count > 0:
            text = f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ '{server.name}' –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!\n\n"
            text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
            text += f"üñ•Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞ VPN: {active_users_count}\n\n"
            text += "‚ùó –ü–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
            text += "1. –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä\n"
            text += "2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã\n\n"
            text += "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä?\n"
            text += "‚ö†Ô∏è –í–°–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –ü–û–¢–ï–†–Ø–Æ–¢ –î–û–°–¢–£–ü –ö VPN!"
            
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data=f"reassign_users_{server_id}_{page}")],
                    [types.InlineKeyboardButton(text="üí• –í—Å—ë —Ä–∞–≤–Ω–æ —É–¥–∞–ª–∏—Ç—å", callback_data=f"force_delete_server_{server_id}_{page}")],
                    [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"server_details_{server_id}_{page}")]
                ]
            )
        else:
            text = f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä '{server.name}'?\n\n"
            text += f"ID: {server.id}\n"
            text += f"URL: {server.url}\n\n"
            text += "‚ùó –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
            
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_server_{server_id}_{page}")],
                    [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"server_details_{server_id}_{page}")]
                ]
            )
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()

@router.callback_query(F.data.startswith("confirm_delete_server_"))
async def confirm_delete_server(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.username not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    parts = callback.data.split("_")
    server_id = int(parts[3])
    page = int(parts[4]) if len(parts) > 4 else 1
    
    async with async_session() as session:
        server = await get_server_by_id(session, server_id)
        if not server:
            await callback.answer("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            await state.clear()
            return
        
        server_name = server.name
        success = await delete_server(session, server_id)
        
        if success:
            await callback.message.edit_text(
                f"‚úÖ –°–µ—Ä–≤–µ—Ä '{server_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data=f"list_servers_page_{page}")]]
                )
            )
        else:
            await callback.message.edit_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä '{server_name}'\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –æ—Å—Ç–∞–ª–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–µ—Ä–≤–µ—Ä—É", callback_data=f"server_details_{server_id}_{page}")]]
                )
            )
    
    await state.clear()
    await callback.answer()

@router.callback_query(F.data.startswith("reassign_users_"))
async def reassign_users_menu(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.username not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    parts = callback.data.split("_")
    from_server_id = int(parts[2])
    page = int(parts[3]) if len(parts) > 3 else 1
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
        servers = await get_active_servers(session)
        target_servers = [s for s in servers if s.id != from_server_id]
        
        if not target_servers:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"delete_server_{from_server_id}_{page}")]]
                )
            )
            await callback.answer()
            return
        
        keyboard = []
        for server in target_servers:
            users_count = await get_server_users_count(session, server.id)
            keyboard.append([
                types.InlineKeyboardButton(
                    text=f"{server.name} (üë• {users_count})",
                    callback_data=f"do_reassign_{from_server_id}_{server.id}_{page}"
                )
            ])
        
        keyboard.append([types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"delete_server_{from_server_id}_{page}")])
        
        await callback.message.edit_text(
            "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await callback.answer()

@router.callback_query(F.data.startswith("do_reassign_"))
async def do_reassign_users(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.username not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    parts = callback.data.split("_")
    from_server_id = int(parts[2])
    to_server_id = int(parts[3])
    page = int(parts[4]) if len(parts) > 4 else 1
    
    async with async_session() as session:
        try:
            # –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            reassigned_count = await reassign_users_to_server(session, from_server_id, to_server_id)
            to_server = await get_server_by_id(session, to_server_id)
            
            await callback.message.edit_text(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–æ {reassigned_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä '{to_server.name}'\n\n"
                "–¢–µ–ø–µ—Ä—å —Å–µ—Ä–≤–µ—Ä –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª–∏—Ç—å.",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [types.InlineKeyboardButton(text="üí• –£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data=f"confirm_delete_server_{from_server_id}_{page}")],
                        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"server_details_{from_server_id}_{page}")]
                    ]
                )
            )
        except Exception as e:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"delete_server_{from_server_id}_{page}")]]
                )
            )
    
    await callback.answer()

@router.callback_query(F.data.startswith("force_delete_server_"))
async def force_delete_server(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.username not in ADMINS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    parts = callback.data.split("_")
    server_id = int(parts[3])
    page = int(parts[4]) if len(parts) > 4 else 1
    
    await callback.message.edit_text(
        "üí• –ü–û–°–õ–ï–î–ù–ï–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï!\n\n"
        "‚ö†Ô∏è –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏!\n"
        "‚ùó –í–°–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –ü–û–¢–ï–†–Ø–Æ–¢ –î–û–°–¢–£–ü –ö VPN!\n"
        "‚ùó –í–°–ï VPN –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ë–£–î–£–¢ –ù–ï–î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–´!\n\n"
        "–í–≤–µ–¥–∏—Ç–µ '–£–î–ê–õ–ò–¢–¨' —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å:",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"delete_server_{server_id}_{page}")]]
        )
    )
    
    await state.update_data(server_id=server_id, page=page, action="force_delete")
    await state.set_state(AdminStates.confirm_delete_server)
    await callback.answer()

@router.message(AdminStates.confirm_delete_server)
async def confirm_force_delete(message: types.Message, state: FSMContext):
    if message.from_user.username not in ADMINS:
        return
    
    data = await state.get_data()
    action = data.get("action")
    
    if action == "force_delete" and message.text.strip().upper() == "–£–î–ê–õ–ò–¢–¨":
        server_id = data.get("server_id")
        page = data.get("page", 1)
        
        async with async_session() as session:
            server = await get_server_by_id(session, server_id)
            if not server:
                await message.answer("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await state.clear()
                return
            
            server_name = server.name
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞
            users_result = await session.execute(select(User).where(User.server_id == server_id))
            users = users_result.scalars().all()
            
            # –û—á–∏—â–∞–µ–º server_id —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await session.execute(
                update(User).where(User.server_id == server_id).values(server_id=None, vpn_link=None)
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä
            await session.delete(server)
            await session.commit()
            
            await message.answer(
                f"üí• –°–µ—Ä–≤–µ—Ä '{server_name}' –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω!\n"
                f"‚ö†Ô∏è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ —Å–µ—Ä–≤–µ—Ä–∞",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data=f"list_servers_page_{page}")]]
                )
            )
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_servers")]]
            )
        )
    
    await state.clear()

