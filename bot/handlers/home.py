from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from db.database import async_session
from db.service.user_service import get_or_create_user
from config.config import TECH_SUPPORT_USERNAME, VPN_PRICE, VPN_PRICE_3, VPN_PRICE_6, VPN_PRICE_REF
from datetime import datetime
from db.service.user_service import renew_subscription, is_user_exist
from bot.vpn_manager import VPNManager
from bot.utils import generate_ref_url
import asyncio
router = Router()

@router.callback_query(F.data == "home_first")
async def home_first_time(callback: types.CallbackQuery):
    async with async_session() as session:
        if not await is_user_exist(session, callback.from_user.id):
            return
        await session.close()

    await callback.message.answer(text="üöÄ –ú—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ!\n\n"
                                       "üéâ –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π, –¥–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã "
                                       "–∑–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! üí™", reply_markup=types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text='üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data='ref')]
        ]
    ))

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='üîë –ú–æ–∏ –∫–ª—é—á–∏', callback_data='configs')],
            [InlineKeyboardButton(text='üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='update_sub')],
            [InlineKeyboardButton(text='üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data="ref")],
            [InlineKeyboardButton(text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data='home_new')],
            [InlineKeyboardButton(text='‚ùì–ü–æ–¥–¥–µ—Ä–∂–∫–∞', url=f'https://t.me/{TECH_SUPPORT_USERNAME}')],
        ]
    )

    async with async_session() as session:
        user = await get_or_create_user(session, callback.from_user)
        await callback.message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç {user.username}!\n\n"
            f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {user.subscription_end.strftime('%d.%m.%Y') if user.subscription_end else '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏'}\n",
            reply_markup=keyboard
        )


async def process_home_action(event):
    """
    –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ home-–¥–µ–π—Å—Ç–≤–∏—è
    –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Å Message, —Ç–∞–∫ –∏ —Å CallbackQuery
    """
    async with async_session() as session:
        if not await is_user_exist(session, event.from_user.id):
            return
        await session.close()
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='üîë –ú–æ–∏ –∫–ª—é—á–∏', callback_data='configs')],
            [InlineKeyboardButton(text='üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='update_sub')],
            [InlineKeyboardButton(text='üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data="ref")],
            [InlineKeyboardButton(text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data='home_new')],
            [InlineKeyboardButton(text='‚ùì–ü–æ–¥–¥–µ—Ä–∂–∫–∞', url=f'https://t.me/{TECH_SUPPORT_USERNAME}')],
        ]
    )

    async with async_session() as session:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        if isinstance(event, types.Message):
            user = await get_or_create_user(session, event.from_user)
            message_to_edit = await event.answer(
                f"üëã –ü—Ä–∏–≤–µ—Ç {user.username}!\n\n"
                f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {user.subscription_end.strftime('%d.%m.%Y') if user.subscription_end else '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏'}\n",
                reply_markup=keyboard
            )
        else:  # CallbackQuery
            user = await get_or_create_user(session, event.from_user)
            await event.message.edit_text(
                f"üëã –ü—Ä–∏–≤–µ—Ç {user.username}!\n\n"
                f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {user.subscription_end.strftime('%d.%m.%Y') if user.subscription_end else '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏'}\n",
                reply_markup=keyboard
            )

        # –ï—Å–ª–∏ —ç—Ç–æ callback, –≤—ã–∑—ã–≤–∞–µ–º answer
        if isinstance(event, types.CallbackQuery):
            await event.answer()


@router.message(Command("home"))
async def home_command(message: types.Message):
    await process_home_action(message)


@router.callback_query(F.data == 'home')
async def home_callback(callback: types.CallbackQuery):
    await process_home_action(callback)

@router.callback_query(F.data == 'home_new')
async def new_home_message(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='üîë –ú–æ–∏ –∫–ª—é—á–∏', callback_data='configs')],
            [InlineKeyboardButton(text='üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='update_sub')],
            [InlineKeyboardButton(text='üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data="ref")],
            [InlineKeyboardButton(text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data='home_new')],
            [InlineKeyboardButton(text='‚ùì–ü–æ–¥–¥–µ—Ä–∂–∫–∞', url=f'https://t.me/{TECH_SUPPORT_USERNAME}')],
        ]
    )
    async with async_session() as session:
        user = await get_or_create_user(session, callback.from_user)
        await callback.message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç {user.username}!\n\n"
            f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {user.subscription_end.strftime('%d.%m.%Y') if user.subscription_end else '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏'}\n",
            reply_markup=keyboard
        )


@router.callback_query(F.data == "configs")
async def configs_callback(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìï –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", url="https://teletype.in/@meowadmin/Z4Z0lCMlWWr")],
        [InlineKeyboardButton(text="üè† –î–æ–º–æ–π", callback_data='home')]
    ])
    async with async_session() as session:
        user = await get_or_create_user(session, callback.from_user)
        
        if (not user.vpn_link and not user.trial_used) or (not user.vpn_link and user.subscription_end and user.subscription_end > datetime.utcnow()):
            vpn_manager = VPNManager(session)
            if user.subscription_end and user.subscription_end > datetime.utcnow():
                subscription_days = (user.subscription_end - datetime.utcnow()).days
            else:
                subscription_days = 14
            vpn_link = await vpn_manager.create_vpn_config(
                user=user,
                subscription_days=subscription_days
            )
            if not vpn_link:
                await callback.message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ú–æ–∏ –∫–ª—é—á–∏\"\n"
                    "–ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üè† –î–æ–º–æ–π", callback_data='home')],
                        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url=f'https://t.me/{TECH_SUPPORT_USERNAME}')]
                    ])
                )
            else:
                await callback.message.edit_text(
                    f"```\n{user.vpn_link}\n```\n\n"
                    f"üîê –í–∞—à –∫–ª—é—á –≥–æ—Ç–æ–≤! –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –Ω–∞–∂–∞—Ç–∏–µ–º –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π.\n\n"
                    f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {user.subscription_end.strftime('%d.%m.%Y')}",
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
            await callback.answer()
            return

        if not user.is_active or not user.subscription_end or user.subscription_end < datetime.utcnow():
            await callback.message.answer(
                "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text='–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='update_sub')]
                ])
            )
            await callback.answer()
            return
        await callback.message.edit_text(
            f"```\n{user.vpn_link}\n```\n\n"
            f"üîê –í–∞—à –∫–ª—é—á –≥–æ—Ç–æ–≤! –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –Ω–∞–∂–∞—Ç–∏–µ–º –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π.\n\n"
            f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {user.subscription_end.strftime('%d.%m.%Y')}",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer() 


@router.callback_query(F.data == "update_sub")
async def update_subscription_auto(callback: types.CallbackQuery):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –±–∞–ª–∞–Ω—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
        
    async with async_session() as session:
        user = await get_or_create_user(session, callback.from_user)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –Ω–∞ —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        if user.balance >= VPN_PRICE_6:
            period_months = 6
            price = VPN_PRICE_6
            period_text = "6 –º–µ—Å—è—Ü–µ–≤"
        elif user.balance >= VPN_PRICE_3:
            period_months = 3 
            price = VPN_PRICE_3
            period_text = "3 –º–µ—Å—è—Ü–∞"
        elif user.balance >= VPN_PRICE:
            period_months = 1
            price = VPN_PRICE
            period_text = "1 –º–µ—Å—è—Ü"
        elif user.balance >= VPN_PRICE_REF:
            period_months = 0.5
            price = VPN_PRICE_REF
            period_text = "15 –¥–Ω–µ–π"
        else:
            # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–∞–∂–µ –Ω–∞ 1 –º–µ—Å—è—Ü
            await callback.message.edit_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.\n\n"
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                                callback_data="payment"
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="üè† –î–æ–º–æ–π",
                                callback_data="home"
                            )
                        ]
                    ]
                )
            )
            await callback.answer()
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω–æ –∏ –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_text = f"üí≥ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
        confirm_text += f"üìÖ –ü–µ—Ä–∏–æ–¥: {period_text}\n"
        confirm_text += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:"
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=f"‚úÖ –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ {period_text}",
                        callback_data=f"confirm_sub_{period_months}_{price}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∞",
                        callback_data="home"
                    )
                ]
            ]
        )
        
        await callback.message.edit_text(confirm_text, reply_markup=keyboard)
        await callback.answer()


@router.callback_query(F.data.startswith("confirm_sub_"))
async def confirm_subscription(callback: types.CallbackQuery):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥ –∏ —Ü–µ–Ω—É –∏–∑ callback_data
    parts = callback.data.split("_")
    period_months = float(parts[2])
    price = float(parts[3])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏...")
        
    await callback.message.edit_text(
        "üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏...\n\n"
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —Å–æ–∑–¥–∞–µ–º VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
    )
    
    await process_update_sub_action(callback, period_months, price)


async def process_update_sub_action(event, period_months, price):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    """
    async with async_session() as session:
        if isinstance(event, types.Message):
            user = await get_or_create_user(session, event.from_user)
        else: 
            user = await get_or_create_user(session, event.from_user)

        # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ –∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        was_active = user.is_active
        old_sub_end = user.subscription_end
        success = await renew_subscription(session, user.id, period_months * 30, price)

        if success:
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            vpn_manager = VPNManager(session)
            vpn_success = await vpn_manager.renew_subscription(
                user=user,
                subscription_days=period_months * 30
            )

            if vpn_success:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
                await session.refresh(user)
                
                if user.vpn_link:
                    message_text = (
                        "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!\n\n"
                        f"üìÖ –ü–µ—Ä–∏–æ–¥: {period_months} –º–µ—Å.\n"
                        f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {user.subscription_end.strftime('%d.%m.%Y')}\n\n"
                        f"–í–∞—à–∞ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n\n"
                        f"```\n{user.vpn_link}\n```"
                    )
                else:
                    message_text = (
                        "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞!\n\n"
                        f"üìÖ –ü–µ—Ä–∏–æ–¥: {period_months} –º–µ—Å.\n"
                        f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {user.subscription_end.strftime('%d.%m.%Y')}\n\n"
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –∫–ª—é—á–∏'."
                    )
                
                success_keyboard = types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            types.InlineKeyboardButton(
                                text="üîë –ú–æ–∏ –∫–ª—é—á–∏",
                                callback_data="configs"
                            )
                        ],
                        [
                            types.InlineKeyboardButton(
                                text="üè† –î–æ–º–æ–π",
                                callback_data="home"
                            )
                        ]
                    ]
                )
            else:
                # VPN –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏
                user.balance += price
                user.subscription_end = old_sub_end
                user.is_active = was_active
                await session.commit()
                
                message_text = (
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
                )
                
                success_keyboard = types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            types.InlineKeyboardButton(
                                text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                                callback_data="update_sub"
                            )
                        ],
                        [
                            types.InlineKeyboardButton(
                                text="‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
                                url=f'https://t.me/{TECH_SUPPORT_USERNAME}'
                            )
                        ],
                        [
                            types.InlineKeyboardButton(
                                text="üè† –î–æ–º–æ–π",
                                callback_data="home"
                            )
                        ]
                    ]
                )
        else:
            # –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É
            message_text = (
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            
            success_keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                            callback_data="update_sub"
                        )
                    ],
                    [
                        types.InlineKeyboardButton(
                            text="‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
                            url=f'https://t.me/{TECH_SUPPORT_USERNAME}'
                        )
                    ],
                    [
                        types.InlineKeyboardButton(
                            text="üè† –î–æ–º–æ–π",
                            callback_data="home"
                        )
                    ]
                ]
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        if isinstance(event, types.Message):
            await event.answer(
                message_text,
                reply_markup=success_keyboard,
                parse_mode="Markdown"
            )
        else:  # CallbackQuery
            await event.message.edit_text(
                message_text,
                reply_markup=success_keyboard,
                parse_mode="Markdown"
            )
            await event.answer()


# @router.message(Command("update_sub"))
# async def update_sub_command(message: types.Message):
#     await process_update_sub_action(message)

@router.callback_query(F.data == 'ref')
async def show_ref_menu(callback: types.CallbackQuery):
    await callback.message.edit_text(text="üóì –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –∑–∞ –∫–∞–∂–¥–æ–≥–æ 14 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!\n\n"
                                          "üëáüèª –°–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ –∏ –ø–æ–¥–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏\n"
                                          f"{await generate_ref_url(callback.from_user.id)}",
                                     reply_markup=types.InlineKeyboardMarkup(
                                         inline_keyboard=[
                                            [types.InlineKeyboardButton(text="üè† –î–æ–º–æ–π", callback_data='home')]
                                        ]
                                     )
                                     )


