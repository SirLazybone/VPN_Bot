from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from db.database import async_session
from db.service.user_service import get_or_create_user
from config.config import TECH_SUPPORT_USERNAME
from datetime import datetime
from db.service.user_service import renew_subscription
from bot.vpn_manager import VPNManager
router = Router()

@router.callback_query(F.data == 'home')
async def home_callback(callback: types.CallbackGame):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='–ú–æ–∏ —Å–µ—Ä–≤–µ—Ä–∞', callback_data='configs')],
            [InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å', callback_data='home')],
            [InlineKeyboardButton(text='–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='payment')],
            [InlineKeyboardButton(text='–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='update_sub')],
            [InlineKeyboardButton(text='–ü–æ–¥–¥–µ—Ä–∂–∫–∞', url=f'https://t.me/{TECH_SUPPORT_USERNAME}')],
        ]
    )
    async with async_session() as session:
        user = await get_or_create_user(session, callback.from_user)
    await callback.message.edit_text(f"–ü—Ä–∏–≤–µ—Ç {user.username}!\n"
                                    f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} —Ä—É–±.\n"
                                    f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {user.subscription_end.strftime('%d.%m.%Y') if user.subscription_end else '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏'}\n", 
                                    reply_markup=keyboard) 
        

@router.callback_query(F.data == "configs")
async def configs_callback(callback: types.CallbackQuery):
    async with async_session() as session:
        user = await get_or_create_user(session, callback.from_user)
        
        if not user.vpn_link:
            await callback.message.answer(
                "‚ùå –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."
            )
            await callback.answer()
            return

        if not user.is_active or not user.subscription_end or user.subscription_end < datetime.utcnow():
            await callback.message.answer(
                "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN."
            )
            await callback.answer()
            return

        await callback.message.answer(
            f"üîë –í–∞—à–∞ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n\n"
            f"{user.vpn_link}\n\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {user.subscription_end.strftime('%d.%m.%Y')}"
        )
        await callback.answer() 

@router.callback_query(F.data == "update_sub")
async def update_subscription(callback: types.CallbackQuery):
    """–ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ —Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞"""
    async with async_session() as session:
        user = await get_or_create_user(session, callback.from_user)
        
        success = await renew_subscription(session, user.id, 30)
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            vpn_manager = VPNManager(session)
            vpn_link = await vpn_manager.renew_subscription(
                user=user,
                subscription_days=30
            )
            
            if vpn_link:
                await callback.message.edit_text(
                    "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!\n\n"
                    f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {user.subscription_end.strftime('%d.%m.%Y')}\n\n"
                    f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} —Ä—É–±.\n\n"
                    f"–í–∞—à–∞ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n{vpn_link}",
                    reply_markup=types.InlineKeyboardMarkup(
                        inline_keyboard=[
                            [
                                types.InlineKeyboardButton(
                                    text="–î–æ–º–æ–π",
                                    callback_data="home"
                                )
                            ]
                        ]
                    )
                )
            else:
                await callback.message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
                )
        else:
            await callback.message.edit_text(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.\n"
                f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance} —Ä—É–±.\n"
                "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: 149 —Ä—É–±.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            types.InlineKeyboardButton(
                                text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                                callback_data="payment"
                            )
                        ],
                        [
                            types.InlineKeyboardButton(
                                text="–î–æ–º–æ–π",
                                callback_data="home"
                            )
                        ]
                    ]
                )
            )
        
        await callback.answer() 