from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from db.database import async_session
from db.service.user_service import get_or_create_user
from config.config import TECH_SUPPORT_USERNAME, VPN_PRICE
from datetime import datetime
from db.service.user_service import renew_subscription
from bot.vpn_manager import VPNManager
router = Router()


async def process_home_action(event):
    """
    –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ home-–¥–µ–π—Å—Ç–≤–∏—è
    –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Å Message, —Ç–∞–∫ –∏ —Å CallbackQuery
    """
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='üîë –ú–æ–∏ –∫–ª—é—á–∏', callback_data='configs')],
            [InlineKeyboardButton(text='üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='update_sub')],
            [InlineKeyboardButton(text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data='home')],
            [InlineKeyboardButton(text='‚ùì–ü–æ–¥–¥–µ—Ä–∂–∫–∞', url=f'https://t.me/{TECH_SUPPORT_USERNAME}')],
        ]
    )

    async with async_session() as session:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        if isinstance(event, types.Message):
            user = await get_or_create_user(session, event.from_user)
            message_to_edit = await event.answer(
                f"üëã –ü—Ä–∏–≤–µ—Ç {user.username}!\n\n"
                f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {user.subscription_end.strftime('%d.%m.%Y') if user.subscription_end else '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏'}\n",
                reply_markup=keyboard
            )
        else:  # CallbackQuery
            user = await get_or_create_user(session, event.from_user)
            await event.message.edit_text(
                f"üëã–ü—Ä–∏–≤–µ—Ç {user.username}!\n"
                f"üí∞–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} —Ä—É–±.\n"
                f"üìÖ–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {user.subscription_end.strftime('%d.%m.%Y') if user.subscription_end else '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏'}\n",
                reply_markup=keyboard
            )

        # –ï—Å–ª–∏ —ç—Ç–æ callback, –≤—ã–∑—ã–≤–∞–µ–º answer
        if isinstance(event, types.CallbackQuery):
            await event.answer()


@router.message(Command("home"))
async def home_command(message: types.Message):
    await process_home_action(message)


@router.callback_query(F.data == 'home')
async def home_callback(callback: types.CallbackQuery):
    await process_home_action(callback)


@router.callback_query(F.data == "configs")
async def configs_callback(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìï –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", url="https://teletype.in/@meowadmin/Z4Z0lCMlWWr")],
        [InlineKeyboardButton(text="üè† –î–æ–º–æ–π", callback_data='home')]
    ])
    async with async_session() as session:
        user = await get_or_create_user(session, callback.from_user)
        
        if not user.vpn_link:
            await callback.message.answer(
                "‚ùå –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."
            )
            await callback.answer()
            return

        if not user.is_active or not user.subscription_end or user.subscription_end < datetime.utcnow():
            await callback.message.answer(
                "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN."
            )
            await callback.answer()
            return

        await callback.message.answer(
            f"üîë –í–∞—à–∞ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n\n"
            f"```\n{user.vpn_link}\n```\n\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {user.subscription_end.strftime('%d.%m.%Y')}\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer() 


async def process_update_sub_action(event):
    """
    –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ update_sub –¥–µ–π—Å—Ç–≤–∏—è
    –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Å Message, —Ç–∞–∫ –∏ —Å CallbackQuery
    """
    async with async_session() as session:
        if isinstance(event, types.Message):
            user = await get_or_create_user(session, event.from_user)
        else: 
            user = await get_or_create_user(session, event.from_user)

        success = await renew_subscription(session, user.id, 30)

        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            vpn_manager = VPNManager(session)
            vpn_link = await vpn_manager.renew_subscription(
                user=user,
                subscription_days=30
            )

            message_text = (
                "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!\n\n"
                f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {user.subscription_end.strftime('%d.%m.%Y')}\n\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} —Ä—É–±.\n\n"
                f"–í–∞—à–∞ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n\n"
                f"```\n{user.vpn_link}\n```\n\n",

            ) if vpn_link else (
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
            )

            success_keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text="üè† –î–æ–º–æ–π",
                            callback_data="home"
                        )
                    ]
                ]
            )
        else:
            message_text = (
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.\n"
                f"üíµ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {VPN_PRICE} —Ä—É–±.\n\n"
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É."
            )
            
            error_keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                            callback_data="payment"
                        )
                    ],
                    [
                        types.InlineKeyboardButton(
                            text="üè† –î–æ–º–æ–π",
                            callback_data="home"
                        )
                    ]
                ]
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        if isinstance(event, types.Message):
            await event.answer(
                message_text,
                reply_markup=success_keyboard if success and vpn_link else error_keyboard,
                parse_mode="Markdown"
            )
        else:  # CallbackQuery
            await event.message.edit_text(
                message_text,
                reply_markup=success_keyboard if success and vpn_link else error_keyboard,
                parse_mode="Markdown"
            )
            await event.answer()


@router.message(Command("update_sub"))
async def update_sub_command(message: types.Message):
    await process_update_sub_action(message)


@router.callback_query(F.data == "update_sub")
async def update_subscription(callback: types.CallbackQuery):
    await process_update_sub_action(callback)
