from aiogram import Router, types, F
from aiogram.types import LabeledPrice
from config.config import PAYMENT_TOKEN, DONATE_STREAM_URL, ADMIN_CHAT, VPN_PRICE, VPN_PRICE_3, VPN_PRICE_6, TECH_SUPPORT_USERNAME
from fastapi import FastAPI, Request, Response
from db.database import async_session
from db.models import User
from db.service.payment_service import create_payment, get_user_payments, get_payment_by_payment_id, \
    update_payment_status
from db.service.user_service import get_or_create_user, get_user_by_username, update_user_balance, \
    renew_subscription
from bot.vpn_manager import VPNManager
from fastapi import APIRouter, Request
import json
from datetime import datetime, timedelta
import traceback
import logging
import asyncio
from bot.donate_api import DonateApi
from sqlalchemy import select

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()
webhook_router = APIRouter()



@router.callback_query(F.data == "payment")
async def show_payment_menu(callback: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    """
    # –°—É–º–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω –ø–æ–¥–ø–∏—Å–∫–∏
    amounts = [
        (VPN_PRICE, f"1 –º–µ—Å—è—Ü - {int(VPN_PRICE)} ‚ÇΩ"),
        (VPN_PRICE_3, f"3 –º–µ—Å—è—Ü–∞ - {int(VPN_PRICE_3)} ‚ÇΩ (10% —Å–∫–∏–¥–∫–∞)"),
        (VPN_PRICE_6, f"6 –º–µ—Å—è—Ü–µ–≤ - {int(VPN_PRICE_6)} ‚ÇΩ (20% —Å–∫–∏–¥–∫–∞)"),
    ]
    text = "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
    
    keyboard_rows = []

    for i in range(len(amounts)):
        row = []
        amount_value, amount_text = amounts[i]
        row.append(
            types.InlineKeyboardButton(
                text=amount_text,
                callback_data=f"pay_amount_{amount_value}"
            )
        )
        keyboard_rows.append(row)

    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard_rows.extend([
        [
            types.InlineKeyboardButton(
                text="üè† –î–æ–º–æ–π",
                callback_data="home"
            )
        ]
    ])
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("pay_amount_"))
async def process_payment_with_amount(callback: types.CallbackQuery, bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—É–º–º–æ–π
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –∏–∑ callback_data
    amount_str = callback.data.split("_")[2]
    try:
        amount = float(amount_str)
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞", show_alert=True)
        return

    await create_payment_with_amount(callback, amount)


async def create_payment_with_amount(callback: types.CallbackQuery, amount: float):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º–æ–π
    """
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
    await callback.answer("–°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂...")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    loading_message = await callback.message.edit_text(
        f"‚è≥ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –Ω–∞ {int(amount)} ‚ÇΩ...\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[
                types.InlineKeyboardButton(text="üè† –û—Ç–º–µ–Ω–∞", callback_data="home")
            ]]
        )
    )
    
    try:
        async with async_session() as session:
            # –ë—ã—Å—Ç—Ä–æ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–ª–∞—Ç–µ–∂
            user = await get_or_create_user(session, callback.from_user)
            payment = await create_payment(
                session=session,
                user_id=user.id,
                nickname=user.username
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await loading_message.edit_text(
                f"‚è≥ –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã {int(amount)} ‚ÇΩ...\n"
                "–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ...",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[
                        types.InlineKeyboardButton(text="üè† –û—Ç–º–µ–Ω–∞", callback_data="home")
                    ]]
                )
            )
            
            donate_api = DonateApi()
            # –ü–µ—Ä–µ–¥–∞–µ–º —Å—É–º–º—É –≤ create_donate_url
            response = await donate_api.create_donate_url(payment_id=payment.id, amount=amount)
            
            if response is None:
                await loading_message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞\n\n"
                    "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è",
                    reply_markup=types.InlineKeyboardMarkup(
                        inline_keyboard=[
                            [types.InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="payment")],
                            [types.InlineKeyboardButton(text="‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{TECH_SUPPORT_USERNAME}")],
                            [types.InlineKeyboardButton(text="üè† –î–æ–º–æ–π", callback_data="home")]
                        ]
                    )
                )
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—É–º–º–æ–π
            await update_payment_status(
                session=session, 
                id=payment.id, 
                payment_id=response['id'],
                status=response['status'], 
                amount=amount  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Å—É–º–º—É, –∞ –Ω–µ –∏–∑ response
            )

            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
                            url=response['url'],
                        )
                    ],
                    [
                        types.InlineKeyboardButton(
                            text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                            callback_data=f"check_payment:{payment.payment_id}"
                        )
                    ],
                    [
                        types.InlineKeyboardButton(
                            text='‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
                            url=f'https://t.me/{TECH_SUPPORT_USERNAME}'
                        )
                    ],
                    [
                        types.InlineKeyboardButton(
                            text="üè† –î–æ–º–æ–π",
                            callback_data='home'
                        )
                    ]
                ]
            )
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            await loading_message.edit_text(
                f"‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"üìå –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n"
                "1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª\n"
                "2Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ –°–ë–ü\n"
                "3Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        
        try:
            await loading_message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [types.InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="payment")],
                        [types.InlineKeyboardButton(text="‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{TECH_SUPPORT_USERNAME}")],
                        [types.InlineKeyboardButton(text="üè† –î–æ–º–æ–π", callback_data="home")]
                    ]
                )
            )
        except Exception as edit_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {edit_error}")
            # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[types.InlineKeyboardButton(text="üè† –î–æ–º–æ–π", callback_data="home")]]
                )
            )


@router.callback_query(F.data.startswith("check_payment:"))
async def check_payment(callback: types.CallbackQuery):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–ø–ª–∞—Ç—É –∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É
    """
    payment_id = callback.data.split(":")[1]
    async with async_session() as session:
        user = await get_or_create_user(session, callback.from_user)
        payment = await get_payment_by_payment_id(session, payment_id)

        donate_api = DonateApi()
        response = await donate_api.find_donate_url(payment_id)

        if response is None:
            await callback.answer(text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n"
                                       "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂", show_alert=True)
            return

        if response['status'] == 'Time':
            await callback.answer(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã...\n"
                "–ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                show_alert=True
            )
            return

        if not payment:
            await callback.answer("–ü–ª–∞—Ç—ë–∂ –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ", show_alert=True)
            return

        if payment.user_id != user.id:
            await callback.answer("–≠—Ç–æ—Ç –ø–ª–∞—Ç—ë–∂ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.", show_alert=True)
            return

        now = datetime.utcnow()
        dt = datetime.strptime(response['expirationDateTime'], "%Y-%m-%dT%H:%M:%S.%fZ")

        if dt < now:
            await callback.answer("–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –∏—Å—Ç–µ–∫–ª–æ, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂", show_alert=True)
            return

        if response['status'] == 'Closed':
            await update_user_balance(session, username=user.username, amount=float(response['amount']))
            await update_payment_status(session, id=payment.id, status=response['status'])

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–Ω–æ–º—É –±–∞–ª–∞–Ω—Å—É
            await session.refresh(user)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
            if user.balance >= VPN_PRICE_6:
                period_months = 6
                price = VPN_PRICE_6
                period_text = "6 –º–µ—Å—è—Ü–µ–≤"
            elif user.balance >= VPN_PRICE_3:
                period_months = 3
                price = VPN_PRICE_3
                period_text = "3 –º–µ—Å—è—Ü–∞"
            elif user.balance >= VPN_PRICE:
                period_months = 1
                price = VPN_PRICE
                period_text = "1 –º–µ—Å—è—Ü"
            else:
                # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–∞–∂–µ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                await callback.answer(
                    f"–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.\n"
                    f"–ë–∞–ª–∞–Ω—Å: {user.balance} ‚ÇΩ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º: {int(VPN_PRICE)} ‚ÇΩ.",
                    show_alert=True
                )
                return
            was_active = user.is_active
            old_sub_end = user.subscription_end
            success = await renew_subscription(session, user.id, period_months * 30, price)

            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                vpn_manager = VPNManager(session)
                success_2 = await vpn_manager.renew_subscription(
                    user=user,
                    subscription_days=period_months * 30
                )

                if success_2:
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
                    updated_user_result = await session.execute(select(User).where(User.id == user.id))
                    updated_user = updated_user_result.scalar_one_or_none()
                    
                    if updated_user and updated_user.vpn_link:
                        message_text = (
                            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!\n\n"
                            f"üìÖ –ü–µ—Ä–∏–æ–¥: {period_text}\n"
                            f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {updated_user.subscription_end.strftime('%d.%m.%Y')}\n\n"
                            f"–í–∞—à–∞ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n\n"
                            f"```\n{updated_user.vpn_link}\n```"
                        )
                    else:
                        message_text = (
                            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞!\n\n"
                            f"üìÖ –ü–µ—Ä–∏–æ–¥: {period_text}\n"
                            f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {user.subscription_end.strftime('%d.%m.%Y')}\n\n"
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –∫–ª—é—á–∏'."
                        )
                else:
                    # VPN –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏
                    user.balance += price
                    user.subscription_end = old_sub_end
                    user.is_active = was_active
                    await session.commit()
                    
                    message_text = (
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏/—Å–æ–∑–¥–∞–Ω–∏–∏ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.\n\n"
                        f"üí∞ –î–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å: {price} ‚ÇΩ.\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é \"–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\"."
                    )

                success_keyboard = types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            types.InlineKeyboardButton(
                                text="üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                                callback_data="update_sub"
                            )
                        ],
                        [
                            types.InlineKeyboardButton(
                                text="üè† –î–æ–º–æ–π",
                                callback_data="home"
                            )
                        ]
                    ]
                )
                await callback.message.answer(text=message_text, reply_markup=success_keyboard, parse_mode="Markdown")
            else:
                await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
        else:
            await callback.answer(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã...\n"
                "–ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                show_alert=True
            )

