from aiogram import Router, types, F
from aiogram.types import LabeledPrice
from config.config import PAYMENT_TOKEN, DONATE_STREAM_URL, ADMIN_CHAT, VPN_PRICE
from fastapi import FastAPI, Request, Response
from db.database import async_session
from db.service.payment_service import create_payment, get_user_payments, get_payment_by_payment_id, \
    update_payment_status
from db.service.user_service import get_or_create_user, get_user_by_username, update_user_balance, \
    renew_subscription
from bot.vpn_manager import VPNManager
from fastapi import APIRouter, Request
import json
from datetime import datetime, timedelta
import traceback
import logging
import asyncio
from sheets.sheets import update_payment_by_nickname, update_user_by_telegram_id
from bot.donate_api import DonateApi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()
webhook_router = APIRouter()


class MockUser:
    def __init__(self, id, username):
        self.id = int(id)  # Ensure the ID is an integer
        self.username = username


@router.callback_query(F.data == "payment")
async def process_payment(callback: types.CallbackQuery, bot):
    async with async_session() as session:
        user = await get_or_create_user(session, callback.from_user)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
        payment = await create_payment(
            session=session,
            user_id=user.id,
            nickname=user.username
        )

        donate_api = DonateApi()
        response = await donate_api.create_donate_url(payment_id=payment.id)
        if response is None:
            await callback.answer(text='–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞,'
                                       ' –ø—Ä–æ–±–ª–µ–º–∞ —É —Å–µ—Ä–≤–∏—Å–∞ –æ–ø–ª–∞—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ'
                                       ' —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –∫–∞–∫–æ-—Ç–æ –≤—Ä–µ–º—è', show_alert=True)
            return

        await update_payment_status(session=session, id=payment.id, payment_id=response['id'],
                                    status=response['status'], amount=response['amount'])

        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
                        url=response['url'],
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                        callback_data=f"check_payment:{payment.payment_id}"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="üè† –î–æ–º–æ–π",
                        callback_data='home'
                    )
                ]

            ]
        )
        await callback.message.edit_text(
            f"üí≥ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"üìå –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n"
            "1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª\n"
            "2Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ –°–ë–ü\n"
            "3Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª\n",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()


@router.callback_query(F.data.startswith("check_payment:"))
async def check_payment(callback: types.CallbackQuery):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–ø–ª–∞—Ç—É –∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É
    """
    payment_id = callback.data.split(":")[1]
    async with async_session() as session:
        user = await get_or_create_user(session, callback.from_user)
        payment = await get_payment_by_payment_id(session, payment_id)

        donate_api = DonateApi()
        response = await donate_api.find_donate_url(payment_id)
        if response is None:
            await callback.answer(text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n"
                                       "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂", show_alert=True)
            return

        if not payment:
            await callback.answer("–ü–ª–∞—Ç—ë–∂ –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ", show_alert=True)
            return

        if payment.user_id != user.id:
            await callback.answer("–≠—Ç–æ—Ç –ø–ª–∞—Ç—ë–∂ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.", show_alert=True)
            return

        now = datetime.utcnow()
        dt = datetime.strptime(response['expirationDateTime'], "%Y-%m-%dT%H:%M:%S.%fZ")

        if dt < now:
            await callback.answer("–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –∏—Å—Ç–µ–∫–ª–æ, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂", show_alert=True)
            return

        if response['status'] == 'Closed':
            await update_user_balance(session, username=user.username, amount=float(response['amount']))
            await update_payment_status(session, id=payment.id, status=response['status'])

            success = await renew_subscription(session, user.id, 30)

            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                vpn_manager = VPNManager(session)
                success_2 = await vpn_manager.renew_subscription(
                    user=user,
                    subscription_days=30
                )

                if success_2:
                    message_text = (f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!\n\n"
                                    f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {user.subscription_end.strftime('%d.%m.%Y')}\n\n"
                                    f"–í–∞—à–∞ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n\n"
                                    f"```\n{user.vpn_link}\n```\n\n")
                else:
                    message_text = ("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.\n"
                                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é")
                    await update_user_balance(session, username=user.username, amount=float(response['amount']))

                success_keyboard = types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            types.InlineKeyboardButton(
                                text="üè† –î–æ–º–æ–π",
                                callback_data="home"
                            )
                        ]
                    ]
                )
                await callback.message.answer(text=message_text, reply_markup=success_keyboard)
        else:
            await callback.answer(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã...\n"
                "–ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                show_alert=True
            )

