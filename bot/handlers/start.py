from aiogram import Router, types, F
from aiogram.filters import Command, CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from db.service.user_service import get_or_create_user, is_user_exist, get_user_by_telegram_id, renew_subscription
from config.config import CHANNEL_ID, CHANNEL_USERNAME, TECH_SUPPORT_USERNAME
from bot.utils import check_subscription
from bot.handlers.home import process_home_action
from db.database import async_session
from bot.handlers.home import home_callback
from bot.vpn_manager import VPNManager
from aiogram import Bot
from config.config import BOT_TOKEN, VPN_PRICE_REF, DAYS_FOR_REF
import asyncio

router = Router()
bot = Bot(BOT_TOKEN)

@router.message(Command("start"))
async def cmd_start(message: types.Message, bot):
    async with async_session() as session:
        if await is_user_exist(session, message.from_user.id):
            if await check_subscription(message.from_user.id, bot):
                await process_home_action(message)
                return

    text = message.text or ""
    parts = text.split()
    referrer_id = None

    if len(parts) > 1:
        referrer_id = parts[1]
        if referrer_id.isdigit() and int(referrer_id) != message.from_user.id:
            referrer_id = int(referrer_id)

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="–ù–∞—à –∫–∞–Ω–∞–ª",
                    url=f"https://t.me/{CHANNEL_USERNAME}"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                    callback_data=f"check_subscription_{referrer_id}"
                )
            ]
        ]
    )
    
    await message.answer(
        "üê±  Meow VPN ‚Äî —ç—Ç–æ —Ç–≤–æ–π –±–∏–ª–µ—Ç –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç!\n"
        "üöÄ –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ 1 –ì–±–∏—Ç/—Å : –±–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –æ–∂–∏–¥–∞–Ω–∏–π –∑–∞–≥—Ä—É–∑–∫–∏!\n"
        "üí∞ –ü–µ—Ä–≤—ã–π –º–µ—Å—è—Ü –±–µ—Å–ø–ª–∞—Ç–Ω–æ! \n\n"
        "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ - –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("check_subscription_"))
async def check_subscription_callback(callback: types.CallbackQuery, bot):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
    parts = callback.data.split("_")
    if parts[2] != 'None' and parts[2].isdigit():
        referrer_id = int(parts[2])
    else:
        referrer_id = None

    await callback.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É...")
            
    await callback.message.edit_text(
        "üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É...\n\n"
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"
    )

    # if referrer_id is not None:
    #     await asyncio.sleep(2)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not await check_subscription(callback.from_user.id, bot):
        await callback.answer(
            "‚ùå –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            show_alert=True
        )
        return

    async with async_session() as session:
        user = await get_or_create_user(session, callback.from_user)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    keyboard2 = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="IOS",
                    callback_data="ios"
                ),
                types.InlineKeyboardButton(
                    text="Android",
                    callback_data="android"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="Windows",
                    callback_data="windows"
                ),
                types.InlineKeyboardButton(
                    text="MacOS",
                    callback_data="macos"
                )
            ]
        ]
    )
    
    await callback.message.edit_text(
        "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π!\n"
        "üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –º–µ—Å—è—Ü –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!\n\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN",
        reply_markup=keyboard2
    )
    await callback.answer()

    # –¢–û–õ–¨–ö–û –ü–û–°–õ–ï –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞
    if referrer_id is not None:
        asyncio.create_task(
            process_referrer_vpn_renewal_isolated(
                referrer_id, 
                callback.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            )
        )
        print(f"üöÄ –ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ VPN –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞ ID: {referrer_id}")

async def process_referrer_vpn_renewal_isolated(referrer_id: int, new_user_username: str):
    """
    –ü–û–õ–ù–û–°–¢–¨–Æ –ò–ó–û–õ–ò–†–û–í–ê–ù–ù–ê–Ø —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è VPN –ø–æ–¥–ø–∏—Å–∫–∏ —Ä–µ—Ñ–µ—Ä–∞.
    –†–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏ –∏ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫.
    """
    # –î–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ–∫—É –≤—Ä–µ–º—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
    # await asyncio.sleep(2)
    
    # –°–æ–∑–¥–∞–µ–º –û–¢–î–ï–õ–¨–ù–´–ô Bot –æ–±—ä–µ–∫—Ç –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    background_bot = None
    try:
        from aiogram import Bot
        from config.config import BOT_TOKEN
        background_bot = Bot(BOT_TOKEN)
        
        # –°–æ–∑–¥–∞–µ–º –û–¢–î–ï–õ–¨–ù–£–Æ —Å–µ—Å—Å–∏—é –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        async with async_session() as isolated_session:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞
            referrer_user = await get_user_by_telegram_id(isolated_session, referrer_id)
            if not referrer_user:
                print(f"‚ùå –†–µ—Ñ–µ—Ä —Å ID {referrer_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç–∫–∞—Ç–∞
            was_active = referrer_user.is_active
            old_sub_end = referrer_user.subscription_end
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–±—ã—Å—Ç—Ä–æ)
            success = await renew_subscription(isolated_session, referrer_user.id, days=DAYS_FOR_REF, price=0)
            
            if success:
                # –°–æ–∑–¥–∞–µ–º VPN –º–µ–Ω–µ–¥–∂–µ—Ä —Å –ò–ó–û–õ–ò–†–û–í–ê–ù–ù–û–ô —Å–µ—Å—Å–∏–µ–π
                vpn_manager = VPNManager(isolated_session)
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–¥–ª–∏—Ç—å VPN –ø–æ–¥–ø–∏—Å–∫—É
                success_vpn = await vpn_manager.renew_subscription(user=referrer_user, subscription_days=DAYS_FOR_REF)
                
                if success_vpn:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–∏
                    await background_bot.send_message(
                        referrer_user.telegram_id,
                        f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{new_user_username} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!\n"
                        f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {DAYS_FOR_REF} –¥–Ω–µ–π"
                    )
                    # print(f"‚úÖ VPN –ø–æ–¥–ø–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞ @{referrer_user.username} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞")
                else:
                    # –ï—Å–ª–∏ VPN API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –Ω–∞ –±–∞–ª–∞–Ω—Å
                    referrer_user.is_active = was_active
                    referrer_user.subscription_end = old_sub_end
                    referrer_user.balance += VPN_PRICE_REF
                    await isolated_session.commit()
                    
                    await background_bot.send_message(
                        referrer_user.telegram_id,
                        f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{new_user_username} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!\n"
                        f"‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –ø—Ä–æ–±–ª–µ–º—ã —Å VPN —Å–µ—Ä–≤–µ—Ä–∞–º–∏\n"
                        f"üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é \"–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\""
                    )
                    print(f"‚ö†Ô∏è VPN API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞ @{referrer_user.username}, –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å –Ω–∞ –±–∞–ª–∞–Ω—Å")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Ä–µ—Ñ–µ—Ä–∞ @{referrer_user.username} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ VPN –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞ {referrer_id}: {e}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ (–µ—Å–ª–∏ bot —Å–æ–∑–¥–∞–ª—Å—è)
        if background_bot:
            try:
                await background_bot.send_message(
                    referrer_id,
                    f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{new_user_username} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!\n"
                    f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ VPN\n"
                    f"üîß –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"
                )
            except Exception as notify_error:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ: {notify_error}")
    finally:
        # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π Bot –æ–±—ä–µ–∫—Ç
        if background_bot:
            try:
                await background_bot.session.close()
            except Exception as close_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ background_bot: {close_error}")
