#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ PostgreSQL
–ü—Ä–∏–≤–æ–¥–∏—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –∏ –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
"""

import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from db.migrations.production_migration_postgresql import production_migration_postgresql

def print_banner():
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–∞–Ω–Ω–µ—Ä"""
    print("=" * 60)
    print("üöÄ –ü–†–û–î–ê–ö–®–ï–ù –ú–ò–ì–†–ê–¶–ò–Ø VPN_BOT (PostgreSQL)")
    print("=" * 60)
    print()
    print("–≠—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:")
    print("üìã 1. –°–æ–∑–¥–∞—Å—Ç —Ç–∞–±–ª–∏—Ü—É servers")
    print("üë§ 2. –î–æ–±–∞–≤–∏—Ç –ø–æ–ª—è server_id (nullable) –∏ trial_used –≤ users")
    print("üñ•Ô∏è 3. –ó–∞–ø–æ–ª–Ω–∏—Ç 3 —Å–µ—Ä–≤–µ—Ä–∞:")
    print("    ‚Ä¢ Netherland-1 (vn.nethcloud.top:8080)")
    print("    ‚Ä¢ Netherland-2 (vn2.nethcloud.top:8080)")
    print("    ‚Ä¢ Paris-1 (paris1.nethcloud.top:8080)")
    print("üéØ 4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç trial_used = True –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("üé™ 5. –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º:")
    print("    ‚Ä¢ ID 1-155 ‚Üí –°–µ—Ä–≤–µ—Ä 1")
    print("    ‚Ä¢ ID 156-308 ‚Üí –°–µ—Ä–≤–µ—Ä 2")
    print("    ‚Ä¢ ID 309-542 ‚Üí –°–µ—Ä–≤–µ—Ä 3")
    print("    ‚Ä¢ ID 543+ ‚Üí –°–µ—Ä–≤–µ—Ä 1")
    print("    (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å vpn_link)")
    print("üîó 6. –î–æ–±–∞–≤–∏—Ç –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á server_id -> servers(id)")
    print()
    print("‚ö†Ô∏è  –í–ê–ñ–ù–û: –°–¥–µ–ª–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
    print("=" * 60)

def confirm_migration():
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    while True:
        response = input("\nü§î –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é? (y/N): ").strip().lower()
        if response in ['y', 'yes', '–¥–∞']:
            return True
        elif response in ['n', 'no', '–Ω–µ—Ç', '']:
            return False
        else:
            print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 'y' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ 'n' –¥–ª—è –æ—Ç–º–µ–Ω—ã")

def suggest_backup():
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"""
    print("\nüíæ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—é PostgreSQL:")
    print("   # –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –≤—Å–µ–π –±–∞–∑—ã")
    print("   pg_dump -h localhost -U username -d database_name > backup_$(date +%Y%m%d_%H%M%S).sql")
    print("   # –∏–ª–∏ —á–µ—Ä–µ–∑ Docker")
    print("   docker exec postgres_container pg_dump -U username database_name > backup.sql")
    
    while True:
        response = input("\n‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞? (y/N): ").strip().lower()
        if response in ['y', 'yes', '–¥–∞']:
            return True
        elif response in ['n', 'no', '–Ω–µ—Ç', '']:
            print("‚ö†Ô∏è  –ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π!")
            continue_anyway = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏? (y/N): ").strip().lower()
            return continue_anyway in ['y', 'yes', '–¥–∞']

async def run_migration_with_checks():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
    print_banner()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è PostgreSQL
    required_env_vars = ['DATABASE_URL']  # –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ
    missing_vars = [var for var in required_env_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL")
        return False
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    if not suggest_backup():
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return False
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if not confirm_migration():
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return False
    
    print("\nüöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ PostgreSQL...")
    print("‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    
    try:
        await production_migration_postgresql()
        print("‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìù –ß—Ç–æ –¥–∞–ª—å—à–µ:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞")
        print("   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã")
        print("   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏: \\d users –≤ psql")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        print("\nüîÑ –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ:")
        print("   1. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∞–∑—É –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:")
        print("      psql -h localhost -U username -d database_name < backup.sql")
        print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–±–ª–µ–º")
        print("   3. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        success = await run_migration_with_checks()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 