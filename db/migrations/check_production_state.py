"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL
–ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å, —á—Ç–æ –Ω—É–∂–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å
"""

from sqlalchemy import text
from db.database import async_session

async def check_production_state_postgresql():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL"""
    async with async_session() as session:
        try:
            print("üîç –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ï–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• PostgreSQL")
            print("=" * 60)
            
            # ===== –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶ =====
            print("\nüìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:")
            result = await session.execute(text("""
                SELECT table_name FROM information_schema.tables 
                WHERE table_schema = 'public' 
                ORDER BY table_name
            """))
            
            tables = [row[0] for row in result.fetchall()]
            for table in tables:
                print(f"   ‚úÖ {table}")
            
            # ===== –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´ USERS =====
            print(f"\nüë§ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users:")
            result = await session.execute(text("""
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns 
                WHERE table_name = 'users' AND table_schema = 'public'
                ORDER BY ordinal_position
            """))
            user_columns = []
            
            for row in result.fetchall():
                column_name, data_type, is_nullable, column_default = row
                user_columns.append(column_name)
                nullable = "NULL" if is_nullable == 'YES' else "NOT NULL"
                default_val = f" DEFAULT {column_default}" if column_default else ""
                print(f"   {column_name}: {data_type} {nullable}{default_val}")
            
            # ===== –ü–†–û–í–ï–†–ö–ê –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–• –ü–û–õ–ï–ô =====
            print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π:")
            missing_fields = []
            
            if 'server_id' not in user_columns:
                missing_fields.append('server_id')
                print("   ‚ùå server_id - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                print("   ‚úÖ server_id - –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            if 'trial_used' not in user_columns:
                missing_fields.append('trial_used')
                print("   ‚ùå trial_used - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                print("   ‚úÖ trial_used - –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            # ===== –ü–†–û–í–ï–†–ö–ê –í–ù–ï–®–ù–ò–• –ö–õ–Æ–ß–ï–ô =====
            print(f"\nüîó –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏:")
            result = await session.execute(text("""
                SELECT 
                    tc.constraint_name,
                    kcu.column_name,
                    ccu.table_name AS foreign_table_name,
                    ccu.column_name AS foreign_column_name
                FROM information_schema.table_constraints AS tc 
                JOIN information_schema.key_column_usage AS kcu
                  ON tc.constraint_name = kcu.constraint_name
                  AND tc.table_schema = kcu.table_schema
                JOIN information_schema.constraint_column_usage AS ccu
                  ON ccu.constraint_name = tc.constraint_name
                  AND ccu.table_schema = tc.table_schema
                WHERE tc.constraint_type = 'FOREIGN KEY' 
                AND tc.table_name = 'users'
            """))
            
            foreign_keys = result.fetchall()
            if foreign_keys:
                for fk in foreign_keys:
                    constraint_name, column_name, foreign_table, foreign_column = fk
                    print(f"   ‚úÖ {column_name} -> {foreign_table}.{foreign_column}")
            else:
                print("   ‚ùå –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
            # ===== –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶–´ –°–ï–†–í–ï–†–û–í =====
            print(f"\nüñ•Ô∏è –¢–∞–±–ª–∏—Ü–∞ servers:")
            if 'servers' in tables:
                print("   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ servers —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
                result = await session.execute(text("SELECT COUNT(*) FROM servers"))
                servers_count = result.scalar()
                print(f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {servers_count}")
                
                if servers_count > 0:
                    result = await session.execute(text("""
                        SELECT id, name, url, is_active, is_default 
                        FROM servers ORDER BY id
                    """))
                    print("   üìù –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Ä–≤–µ—Ä—ã:")
                    for row in result.fetchall():
                        server_id, name, url, is_active, is_default = row
                        status = "‚úÖ" if is_active else "‚ùå"
                        default_mark = " [DEFAULT]" if is_default else ""
                        print(f"      {server_id}: {name} ({url}) {status}{default_mark}")
            else:
                print("   ‚ùå –¢–∞–±–ª–∏—Ü–∞ servers –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô =====
            print(f"\nüë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            result = await session.execute(text("SELECT COUNT(*) FROM users"))
            total_users = result.scalar()
            print(f"   üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
            
            # –° VPN –∫–æ–Ω—Ñ–∏–≥–∞–º–∏
            result = await session.execute(text("SELECT COUNT(*) FROM users WHERE vpn_link IS NOT NULL"))
            users_with_vpn = result.scalar()
            print(f"   üñ•Ô∏è –° VPN –∫–æ–Ω—Ñ–∏–≥–∞–º–∏: {users_with_vpn}")
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            result = await session.execute(text("SELECT COUNT(*) FROM users WHERE is_active = TRUE"))
            active_users = result.scalar()
            print(f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ: {active_users}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º trial_used –µ—Å–ª–∏ –ø–æ–ª–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if 'trial_used' in user_columns:
                result = await session.execute(text("SELECT COUNT(*) FROM users WHERE trial_used = TRUE"))
                trial_used_count = result.scalar()
                print(f"   üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {trial_used_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º server_id –µ—Å–ª–∏ –ø–æ–ª–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if 'server_id' in user_columns:
                result = await session.execute(text("""
                    SELECT server_id, COUNT(*) as count 
                    FROM users 
                    WHERE server_id IS NOT NULL 
                    GROUP BY server_id 
                    ORDER BY server_id
                """))
                print(f"   üñ•Ô∏è –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º:")
                for row in result.fetchall():
                    server_id, count = row
                    print(f"      –°–µ—Ä–≤–µ—Ä {server_id}: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            # ===== –î–ò–ê–ü–ê–ó–û–ù–´ ID –î–õ–Ø –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø =====
            print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å VPN:")
            
            if users_with_vpn > 0:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ 1-155
                result = await session.execute(text("""
                    SELECT COUNT(*) FROM users 
                    WHERE id >= 1 AND id <= 155 AND vpn_link IS NOT NULL
                """))
                range_1 = result.scalar()
                
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ 156-308
                result = await session.execute(text("""
                    SELECT COUNT(*) FROM users 
                    WHERE id >= 156 AND id <= 308 AND vpn_link IS NOT NULL
                """))
                range_2 = result.scalar()
                
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ 309-542
                result = await session.execute(text("""
                    SELECT COUNT(*) FROM users 
                    WHERE id >= 309 AND id <= 542 AND vpn_link IS NOT NULL
                """))
                range_3 = result.scalar()
                
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ 543+
                result = await session.execute(text("""
                    SELECT COUNT(*) FROM users 
                    WHERE id >= 543 AND vpn_link IS NOT NULL
                """))
                range_4 = result.scalar()
                
                print(f"   ID 1-155 ‚Üí –°–µ—Ä–≤–µ—Ä 1: {range_1} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                print(f"   ID 156-308 ‚Üí –°–µ—Ä–≤–µ—Ä 2: {range_2} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                print(f"   ID 309-542 ‚Üí –°–µ—Ä–≤–µ—Ä 3: {range_3} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                print(f"   ID 543+ ‚Üí –°–µ—Ä–≤–µ—Ä 1: {range_4} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                print(f"   üìà –í—Å–µ–≥–æ –∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é: {range_1 + range_2 + range_3 + range_4}")
            
            # ===== –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–ï–ô =====
            # print(f"\nüî¢ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (sequences):")
            # result = await session.execute(text("""
            #     SELECT sequence_name, last_value
            #     FROM information_schema.sequences
            #     WHERE sequence_schema = 'public'
            # """))
            #
            # sequences = result.fetchall()
            # if sequences:
            #     for seq_name, last_value in sequences:
            #         print(f"   üìä {seq_name}: {last_value}")
            # else:
            #     print("   ‚ÑπÔ∏è –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # ===== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò =====
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            
            if not missing_fields and 'servers' in tables:
                print("   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                if not foreign_keys:
                    print("   ‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏")
            else:
                print("   üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è:")
                if missing_fields:
                    print(f"      ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—è: {', '.join(missing_fields)}")
                if 'servers' not in tables:
                    print("      ‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É servers")
                    print("      ‚Ä¢ –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å–µ—Ä–≤–µ—Ä—ã –¥–∞–Ω–Ω—ã–º–∏")
                print("      ‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º")
                print("      ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å trial_used = TRUE –¥–ª—è –≤—Å–µ—Ö")
                if not foreign_keys:
                    print("      ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏")
            
            print(f"\nüìù –î–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
            print(f"   python run_production_migration_postgresql.py")
            
            print("\n" + "=" * 60)
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

if __name__ == "__main__":
    import asyncio
    asyncio.run(check_production_state_postgresql()) 